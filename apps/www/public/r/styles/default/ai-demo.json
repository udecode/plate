{
  "doc": {
    "description": "AI menu with commands, streaming responses in a preview or directly into the editor.",
    "docs": [
      {
        "route": "/docs/ai",
        "title": "AI"
      }
    ],
    "title": "AI"
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { Plate } from '@udecode/plate-common/react';\n\nimport { editorPlugins } from '@/components/editor/plugins/editor-plugins';\nimport { useCreateEditor } from '@/components/editor/use-create-editor';\nimport { Editor, EditorContainer } from '@/components/plate-ui/editor';\n\nimport { DEMO_VALUES } from './values/demo-values';\n\nexport default function Demo({ id }: { id: string }) {\n  const editor = useCreateEditor({\n    plugins: [...editorPlugins],\n    value: DEMO_VALUES[id],\n  });\n\n  return (\n    <Plate editor={editor}>\n      <EditorContainer variant=\"demo\">\n        <Editor />\n      </EditorContainer>\n    </Plate>\n  );\n}\n",
      "path": "example/demo.tsx",
      "target": "components/demo.tsx",
      "type": "registry:example"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { withProps } from '@udecode/cn';\nimport { AIChatPlugin, AIPlugin } from '@udecode/plate-ai/react';\nimport {\n  BoldPlugin,\n  CodePlugin,\n  ItalicPlugin,\n  StrikethroughPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n  CodeSyntaxPlugin,\n} from '@udecode/plate-code-block/react';\nimport {\n  ParagraphPlugin,\n  PlateLeaf,\n  createPlateEditor,\n} from '@udecode/plate-common/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport { LinkPlugin } from '@udecode/plate-link/react';\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\n\nimport { cursorOverlayPlugin } from '@/components/editor/plugins/cursor-overlay-plugin';\nimport { AIMenu } from '@/components/plate-ui/ai-menu';\nimport { BlockquoteElement } from '@/components/plate-ui/blockquote-element';\nimport { CodeBlockElement } from '@/components/plate-ui/code-block-element';\nimport { CodeLeaf } from '@/components/plate-ui/code-leaf';\nimport { CodeLineElement } from '@/components/plate-ui/code-line-element';\nimport { CodeSyntaxLeaf } from '@/components/plate-ui/code-syntax-leaf';\nimport { HeadingElement } from '@/components/plate-ui/heading-element';\nimport { HrElement } from '@/components/plate-ui/hr-element';\nimport { LinkElement } from '@/components/plate-ui/link-element';\nimport { ParagraphElement } from '@/components/plate-ui/paragraph-element';\n\nimport { basicNodesPlugins } from './basic-nodes-plugins';\nimport { blockSelectionReadOnlyPlugin } from './block-selection-plugins';\nimport { indentListPlugins } from './indent-list-plugins';\nimport { linkPlugin } from './link-plugin';\n\nconst createAIEditor = () => {\n  const editor = createPlateEditor({\n    id: 'ai',\n    override: {\n      components: {\n        [BlockquotePlugin.key]: BlockquoteElement,\n        [BoldPlugin.key]: withProps(PlateLeaf, { as: 'strong' }),\n        [CodeBlockPlugin.key]: CodeBlockElement,\n        [CodeLinePlugin.key]: CodeLineElement,\n        [CodePlugin.key]: CodeLeaf,\n        [CodeSyntaxPlugin.key]: CodeSyntaxLeaf,\n        [HEADING_KEYS.h1]: withProps(HeadingElement, { variant: 'h1' }),\n        [HEADING_KEYS.h2]: withProps(HeadingElement, { variant: 'h2' }),\n        [HEADING_KEYS.h3]: withProps(HeadingElement, { variant: 'h3' }),\n        [HorizontalRulePlugin.key]: HrElement,\n        [ItalicPlugin.key]: withProps(PlateLeaf, { as: 'em' }),\n        [LinkPlugin.key]: LinkElement,\n        [ParagraphPlugin.key]: ParagraphElement,\n        [StrikethroughPlugin.key]: withProps(PlateLeaf, { as: 's' }),\n        [UnderlinePlugin.key]: withProps(PlateLeaf, { as: 'u' }),\n      },\n    },\n    plugins: [\n      ...basicNodesPlugins,\n      ...indentListPlugins,\n      HorizontalRulePlugin,\n      linkPlugin,\n      MarkdownPlugin.configure({ options: { indentList: true } }),\n      blockSelectionReadOnlyPlugin,\n    ],\n  });\n\n  return editor;\n};\n\nconst systemCommon = `\\\nYou are an advanced AI-powered note-taking assistant, designed to enhance productivity and creativity in note management.\nRespond directly to user prompts with clear, concise, and relevant content. Maintain a neutral, helpful tone.\n\nRules:\n- <Document> is the entire note the user is working on.\n- <Reminder> is a reminder of how you should reply to INSTRUCTIONS. It does not apply to questions.\n- Anything else is the user prompt.\n- Your response should be tailored to the user's prompt, providing precise assistance to optimize note management.\n- For INSTRUCTIONS: Follow the <Reminder> exactly. Provide ONLY the content to be inserted or replaced. No explanations or comments.\n- For QUESTIONS: Provide a helpful and concise answer. You may include brief explanations if necessary.\n- CRITICAL: Distinguish between INSTRUCTIONS and QUESTIONS. Instructions typically ask you to modify or add content. Questions ask for information or clarification.\n`;\n\nconst systemDefault = `\\\n${systemCommon}\n- <Block> is the current block of text the user is working on.\n- Ensure your output can seamlessly fit into the existing <Block> structure.\n- CRITICAL: Provide only a single block of text. DO NOT create multiple paragraphs or separate blocks.\n<Block>\n{block}\n</Block>\n`;\n\nconst systemSelecting = `\\\n${systemCommon}\n- <Block> is the block of text containing the user's selection, providing context.\n- Ensure your output can seamlessly fit into the existing <Block> structure.\n- <Selection> is the specific text the user has selected in the block and wants to modify or ask about.\n- Consider the context provided by <Block>, but only modify <Selection>. Your response should be a direct replacement for <Selection>.\n<Block>\n{block}\n</Block>\n<Selection>\n{selection}\n</Selection>\n`;\n\nconst systemBlockSelecting = `\\\n${systemCommon}\n- <Selection> represents the full blocks of text the user has selected and wants to modify or ask about.\n- Your response should be a direct replacement for the entire <Selection>.\n- Maintain the overall structure and formatting of the selected blocks, unless explicitly instructed otherwise.\n- CRITICAL: Provide only the content to replace <Selection>. Do not add additional blocks or change the block structure unless specifically requested.\n<Selection>\n{block}\n</Selection>\n`;\n\nconst userDefault = `<Reminder>\nCRITICAL: DO NOT use block formatting. You can only use inline formatting.\nCRITICAL: DO NOT start new lines or paragraphs.\nNEVER write <Block>.\n</Reminder>\n{prompt}`;\n\nconst userSelecting = `<Reminder>\nIf this is a question, provide a helpful and concise answer about <Selection>.\nIf this is an instruction, provide ONLY the text to replace <Selection>. No explanations.\nEnsure it fits seamlessly within <Block>. If <Block> is empty, write ONE random sentence.\nNEVER write <Block> or <Selection>.\n</Reminder>\n{prompt} about <Selection>`;\n\nconst userBlockSelecting = `<Reminder>\nIf this is a question, provide a helpful and concise answer about <Selection>.\nIf this is an instruction, provide ONLY the content to replace the entire <Selection>. No explanations.\nMaintain the overall structure unless instructed otherwise.\nNEVER write <Block> or <Selection>.\n</Reminder>\n{prompt} about <Selection>`;\n\nexport const PROMPT_TEMPLATES = {\n  systemBlockSelecting,\n  systemDefault,\n  systemSelecting,\n  userBlockSelecting,\n  userDefault,\n  userSelecting,\n};\n\nexport const aiPlugins = [\n  cursorOverlayPlugin,\n  MarkdownPlugin.configure({ options: { indentList: true } }),\n  AIPlugin,\n  AIChatPlugin.configure({\n    options: {\n      createAIEditor,\n      promptTemplate: ({ isBlockSelecting, isSelecting }) => {\n        return isBlockSelecting\n          ? PROMPT_TEMPLATES.userBlockSelecting\n          : isSelecting\n            ? PROMPT_TEMPLATES.userSelecting\n            : PROMPT_TEMPLATES.userDefault;\n      },\n      systemTemplate: ({ isBlockSelecting, isSelecting }) => {\n        return isBlockSelecting\n          ? PROMPT_TEMPLATES.systemBlockSelecting\n          : isSelecting\n            ? PROMPT_TEMPLATES.systemSelecting\n            : PROMPT_TEMPLATES.systemDefault;\n      },\n    },\n    render: { afterEditable: () => <AIMenu /> },\n  }),\n] as const;\n",
      "path": "components/editor/plugins/ai-plugins.tsx",
      "target": "components/ai-plugins.tsx",
      "type": "registry:example"
    },
    {
      "content": "import { jsx } from '@udecode/plate-test-utils';\n\njsx;\n\nexport const aiValue: any = (\n  <fragment>\n    <hh2>AI Menu</hh2>\n    <hp>Generate and refine content with AI.</hp>\n    <hp>Access the AI menu in many ways:</hp>\n    <hp indent={1} listStyleType=\"decimal\">\n      <htext>Press \"âŒ˜ + J\".</htext>\n    </hp>\n    <hp indent={1} listStart={2} listStyleType=\"decimal\">\n      <htext>Select text and click \"Ask AI\" in the floating toolbar</htext>\n    </hp>\n    <hp indent={1} listStart={3} listStyleType=\"decimal\">\n      <htext>Right-click a block and select \"Ask AI\"</htext>\n    </hp>\n    <hp indent={1} listStart={4} listStyleType=\"decimal\">\n      <htext>Press space in an empty block. Try it out:</htext>\n    </hp>\n    <hp indent={2} listStyleType=\"disc\">\n      <htext />\n    </hp>\n    <hp>Once opened, you can:</hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Search commands in the input field:</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Use arrow keys to navigate, Enter to select</htext>\n    </hp>\n    <hp>\n      <htext>Generating commands:</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Continue writing</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Add a summary</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Explain</htext>\n    </hp>\n    <hp>\n      <htext>Generating suggestions:</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Accept</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Discard</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Try again</htext>\n    </hp>\n    <hp>\n      <htext>Editing commands:</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Improve writing</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Make it longer or shorter</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Fix spelling & grammar</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Simplify language</htext>\n    </hp>\n    <hp>Editing suggestions:</hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Replace the selection</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Insert below</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Discard</htext>\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      <htext>Try again</htext>\n    </hp>\n    <hp>\n      <htext>Note: chat history is preserved until the menu is closed.</htext>\n    </hp>\n  </fragment>\n);\n",
      "path": "example/values/ai-value.tsx",
      "target": "components/ai-value.tsx",
      "type": "registry:example"
    },
    {
      "content": "'use client';\n\nimport type { Value } from '@udecode/plate-common';\n\nimport { withProps } from '@udecode/cn';\nimport { AIPlugin } from '@udecode/plate-ai/react';\nimport {\n  BoldPlugin,\n  CodePlugin,\n  ItalicPlugin,\n  StrikethroughPlugin,\n  SubscriptPlugin,\n  SuperscriptPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n  CodeSyntaxPlugin,\n} from '@udecode/plate-code-block/react';\nimport { CommentsPlugin } from '@udecode/plate-comments/react';\nimport {\n  type CreatePlateEditorOptions,\n  ParagraphPlugin,\n  PlateLeaf,\n  usePlateEditor,\n} from '@udecode/plate-common/react';\nimport { DatePlugin } from '@udecode/plate-date/react';\nimport { EmojiInputPlugin } from '@udecode/plate-emoji/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { TocPlugin } from '@udecode/plate-heading/react';\nimport { HighlightPlugin } from '@udecode/plate-highlight/react';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport { KbdPlugin } from '@udecode/plate-kbd/react';\nimport { ColumnItemPlugin, ColumnPlugin } from '@udecode/plate-layout/react';\nimport { LinkPlugin } from '@udecode/plate-link/react';\nimport {\n  AudioPlugin,\n  FilePlugin,\n  ImagePlugin,\n  MediaEmbedPlugin,\n  PlaceholderPlugin,\n  VideoPlugin,\n} from '@udecode/plate-media/react';\nimport {\n  MentionInputPlugin,\n  MentionPlugin,\n} from '@udecode/plate-mention/react';\nimport { SlashInputPlugin } from '@udecode/plate-slash-command/react';\nimport {\n  TableCellHeaderPlugin,\n  TableCellPlugin,\n  TablePlugin,\n  TableRowPlugin,\n} from '@udecode/plate-table/react';\nimport { TogglePlugin } from '@udecode/plate-toggle/react';\n\nimport { AILeaf } from '@/components/plate-ui/ai-leaf';\nimport { BlockquoteElement } from '@/components/plate-ui/blockquote-element';\nimport { CodeBlockElement } from '@/components/plate-ui/code-block-element';\nimport { CodeLeaf } from '@/components/plate-ui/code-leaf';\nimport { CodeLineElement } from '@/components/plate-ui/code-line-element';\nimport { CodeSyntaxLeaf } from '@/components/plate-ui/code-syntax-leaf';\nimport { ColumnElement } from '@/components/plate-ui/column-element';\nimport { ColumnGroupElement } from '@/components/plate-ui/column-group-element';\nimport { CommentLeaf } from '@/components/plate-ui/comment-leaf';\nimport { DateElement } from '@/components/plate-ui/date-element';\nimport { EmojiInputElement } from '@/components/plate-ui/emoji-input-element';\nimport { HeadingElement } from '@/components/plate-ui/heading-element';\nimport { HighlightLeaf } from '@/components/plate-ui/highlight-leaf';\nimport { HrElement } from '@/components/plate-ui/hr-element';\nimport { ImageElement } from '@/components/plate-ui/image-element';\nimport { KbdLeaf } from '@/components/plate-ui/kbd-leaf';\nimport { LinkElement } from '@/components/plate-ui/link-element';\nimport { MediaAudioElement } from '@/components/plate-ui/media-audio-element';\nimport { MediaEmbedElement } from '@/components/plate-ui/media-embed-element';\nimport { MediaFileElement } from '@/components/plate-ui/media-file-element';\nimport { MediaPlaceholderElement } from '@/components/plate-ui/media-placeholder-element';\nimport { MediaVideoElement } from '@/components/plate-ui/media-video-element';\nimport { MentionElement } from '@/components/plate-ui/mention-element';\nimport { MentionInputElement } from '@/components/plate-ui/mention-input-element';\nimport { ParagraphElement } from '@/components/plate-ui/paragraph-element';\nimport { withPlaceholders } from '@/components/plate-ui/placeholder';\nimport { SlashInputElement } from '@/components/plate-ui/slash-input-element';\nimport {\n  TableCellElement,\n  TableCellHeaderElement,\n} from '@/components/plate-ui/table-cell-element';\nimport { TableElement } from '@/components/plate-ui/table-element';\nimport { TableRowElement } from '@/components/plate-ui/table-row-element';\nimport { TocElement } from '@/components/plate-ui/toc-element';\nimport { ToggleElement } from '@/components/plate-ui/toggle-element';\nimport { withDraggables } from '@/components/plate-ui/with-draggables';\n\nimport { editorPlugins, viewPlugins } from './plugins/editor-plugins';\n\nexport const viewComponents = {\n  [AudioPlugin.key]: MediaAudioElement,\n  [BlockquotePlugin.key]: BlockquoteElement,\n  [BoldPlugin.key]: withProps(PlateLeaf, { as: 'strong' }),\n  [CodeBlockPlugin.key]: CodeBlockElement,\n  [CodeLinePlugin.key]: CodeLineElement,\n  [CodePlugin.key]: CodeLeaf,\n  [CodeSyntaxPlugin.key]: CodeSyntaxLeaf,\n  [ColumnItemPlugin.key]: ColumnElement,\n  [ColumnPlugin.key]: ColumnGroupElement,\n  [CommentsPlugin.key]: CommentLeaf,\n  [DatePlugin.key]: DateElement,\n  [FilePlugin.key]: MediaFileElement,\n  [HEADING_KEYS.h1]: withProps(HeadingElement, { variant: 'h1' }),\n  [HEADING_KEYS.h2]: withProps(HeadingElement, { variant: 'h2' }),\n  [HEADING_KEYS.h3]: withProps(HeadingElement, { variant: 'h3' }),\n  [HEADING_KEYS.h4]: withProps(HeadingElement, { variant: 'h4' }),\n  [HEADING_KEYS.h5]: withProps(HeadingElement, { variant: 'h5' }),\n  [HEADING_KEYS.h6]: withProps(HeadingElement, { variant: 'h6' }),\n  [HighlightPlugin.key]: HighlightLeaf,\n  [HorizontalRulePlugin.key]: HrElement,\n  [ImagePlugin.key]: ImageElement,\n  [ItalicPlugin.key]: withProps(PlateLeaf, { as: 'em' }),\n  [KbdPlugin.key]: KbdLeaf,\n  [LinkPlugin.key]: LinkElement,\n  [MediaEmbedPlugin.key]: MediaEmbedElement,\n  [MentionPlugin.key]: MentionElement,\n  [ParagraphPlugin.key]: ParagraphElement,\n  [PlaceholderPlugin.key]: MediaPlaceholderElement,\n  [StrikethroughPlugin.key]: withProps(PlateLeaf, { as: 's' }),\n  [SubscriptPlugin.key]: withProps(PlateLeaf, { as: 'sub' }),\n  [SuperscriptPlugin.key]: withProps(PlateLeaf, { as: 'sup' }),\n  [TableCellHeaderPlugin.key]: TableCellHeaderElement,\n  [TableCellPlugin.key]: TableCellElement,\n  [TablePlugin.key]: TableElement,\n  [TableRowPlugin.key]: TableRowElement,\n  [TocPlugin.key]: TocElement,\n  [TogglePlugin.key]: ToggleElement,\n  [UnderlinePlugin.key]: withProps(PlateLeaf, { as: 'u' }),\n  [VideoPlugin.key]: MediaVideoElement,\n};\n\nexport const editorComponents = {\n  ...viewComponents,\n  [AIPlugin.key]: AILeaf,\n  [EmojiInputPlugin.key]: EmojiInputElement,\n  [MentionInputPlugin.key]: MentionInputElement,\n  [SlashInputPlugin.key]: SlashInputElement,\n};\n\nexport const useCreateEditor = (\n  {\n    components,\n    override,\n    readOnly,\n    ...options\n  }: {\n    components?: Record<string, any>;\n    plugins?: any[];\n    readOnly?: boolean;\n  } & Omit<CreatePlateEditorOptions, 'plugins'> = {},\n  deps: any[] = []\n) => {\n  return usePlateEditor<Value, (typeof editorPlugins)[number]>(\n    {\n      override: {\n        components: {\n          ...(readOnly\n            ? viewComponents\n            : withPlaceholders(withDraggables(editorComponents))),\n          ...components,\n        },\n        ...override,\n      },\n      plugins: (readOnly ? viewPlugins : editorPlugins) as any,\n      ...options,\n    },\n    deps\n  );\n};\n",
      "path": "components/editor/use-create-editor.ts",
      "target": "components/use-create-editor.ts",
      "type": "registry:example"
    },
    {
      "content": "'use client';\n\nimport { CalloutPlugin } from '@udecode/plate-callout/react';\nimport { ParagraphPlugin } from '@udecode/plate-common/react';\nimport { DatePlugin } from '@udecode/plate-date/react';\nimport { DocxPlugin } from '@udecode/plate-docx';\nimport { EmojiPlugin } from '@udecode/plate-emoji/react';\nimport {\n  FontBackgroundColorPlugin,\n  FontColorPlugin,\n  FontSizePlugin,\n} from '@udecode/plate-font/react';\nimport { HighlightPlugin } from '@udecode/plate-highlight/react';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport { JuicePlugin } from '@udecode/plate-juice';\nimport { KbdPlugin } from '@udecode/plate-kbd/react';\nimport { ColumnPlugin } from '@udecode/plate-layout/react';\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\nimport {\n  EquationPlugin,\n  InlineEquationPlugin,\n} from '@udecode/plate-math/react';\nimport { SlashPlugin } from '@udecode/plate-slash-command/react';\nimport { TogglePlugin } from '@udecode/plate-toggle/react';\nimport { TrailingBlockPlugin } from '@udecode/plate-trailing-block';\n\nimport { FixedToolbarPlugin } from '@/components/editor/plugins/fixed-toolbar-plugin';\nimport { FloatingToolbarPlugin } from '@/components/editor/plugins/floating-toolbar-plugin';\n\nimport { aiPlugins } from './ai-plugins';\nimport { alignPlugin } from './align-plugin';\nimport { autoformatPlugin } from './autoformat-plugin';\nimport { basicNodesPlugins } from './basic-nodes-plugins';\nimport { blockMenuPlugins } from './block-menu-plugins';\nimport { commentsPlugin } from './comments-plugin';\nimport { cursorOverlayPlugin } from './cursor-overlay-plugin';\nimport { deletePlugins } from './delete-plugins';\nimport { dndPlugins } from './dnd-plugins';\nimport { exitBreakPlugin } from './exit-break-plugin';\nimport { indentListPlugins } from './indent-list-plugins';\nimport { lineHeightPlugin } from './line-height-plugin';\nimport { linkPlugin } from './link-plugin';\nimport { mediaPlugins } from './media-plugins';\nimport { mentionPlugin } from './mention-plugin';\nimport { resetBlockTypePlugin } from './reset-block-type-plugin';\nimport { softBreakPlugin } from './soft-break-plugin';\nimport { tablePlugin } from './table-plugin';\nimport { tocPlugin } from './toc-plugin';\n\nexport const viewPlugins = [\n  ...basicNodesPlugins,\n  HorizontalRulePlugin,\n  linkPlugin,\n  DatePlugin,\n  mentionPlugin,\n  tablePlugin,\n  TogglePlugin,\n  tocPlugin,\n  ...mediaPlugins,\n  InlineEquationPlugin,\n  EquationPlugin,\n  CalloutPlugin,\n  ColumnPlugin,\n\n  // Marks\n  FontColorPlugin,\n  FontBackgroundColorPlugin,\n  FontSizePlugin,\n  HighlightPlugin,\n  KbdPlugin,\n\n  // Block Style\n  alignPlugin,\n  ...indentListPlugins,\n  lineHeightPlugin,\n\n  // Collaboration\n  commentsPlugin,\n] as const;\n\nexport const editorPlugins = [\n  // AI\n  ...aiPlugins,\n\n  // Nodes\n  ...viewPlugins,\n\n  // Functionality\n  SlashPlugin,\n  autoformatPlugin,\n  cursorOverlayPlugin,\n  ...blockMenuPlugins,\n  ...dndPlugins,\n  EmojiPlugin,\n  exitBreakPlugin,\n  resetBlockTypePlugin,\n  ...deletePlugins,\n  softBreakPlugin,\n  TrailingBlockPlugin.configure({ options: { type: ParagraphPlugin.key } }),\n\n  // Deserialization\n  DocxPlugin,\n  MarkdownPlugin.configure({ options: { indentList: true } }),\n  JuicePlugin,\n\n  // UI\n  FixedToolbarPlugin,\n  FloatingToolbarPlugin,\n];\n",
      "path": "components/editor/plugins/editor-plugins.tsx",
      "target": "components/editor-plugins.tsx",
      "type": "registry:example"
    }
  ],
  "name": "ai-demo",
  "registryDependencies": [
    "basic-nodes-plugins",
    "block-selection-plugins",
    "indent-list-plugins",
    "link-plugin"
  ],
  "type": "registry:example"
}
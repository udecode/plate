{
  "doc": {
    "description": "Table of contents generation."
  },
  "files": [
    {
      "content": "'use client';\n\nimport React, { useRef } from 'react';\n\nimport type { ValueId } from '@/config/customizer-plugins';\n\nimport { cn } from '@udecode/cn';\nimport { AIChatPlugin, CopilotPlugin } from '@udecode/plate-ai/react';\nimport { AlignPlugin } from '@udecode/plate-alignment/react';\nimport { AutoformatPlugin } from '@udecode/plate-autoformat/react';\nimport {\n  BoldPlugin,\n  CodePlugin,\n  ItalicPlugin,\n  StrikethroughPlugin,\n  SubscriptPlugin,\n  SuperscriptPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { SingleLinePlugin } from '@udecode/plate-break/react';\nimport { CaptionPlugin } from '@udecode/plate-caption/react';\nimport { CodeBlockPlugin } from '@udecode/plate-code-block/react';\nimport { CommentsPlugin } from '@udecode/plate-comments/react';\nimport {\n  ParagraphPlugin,\n  Plate,\n  usePlateEditor,\n} from '@udecode/plate-common/react';\nimport { DatePlugin } from '@udecode/plate-date/react';\nimport { DndPlugin } from '@udecode/plate-dnd';\nimport { DocxPlugin } from '@udecode/plate-docx';\nimport { EmojiPlugin } from '@udecode/plate-emoji/react';\nimport { ExcalidrawPlugin } from '@udecode/plate-excalidraw/react';\nimport {\n  FontBackgroundColorPlugin,\n  FontColorPlugin,\n  FontSizePlugin,\n} from '@udecode/plate-font/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { HeadingPlugin, TocPlugin } from '@udecode/plate-heading/react';\nimport { HighlightPlugin } from '@udecode/plate-highlight/react';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport { IndentPlugin } from '@udecode/plate-indent/react';\nimport { IndentListPlugin } from '@udecode/plate-indent-list/react';\nimport { JuicePlugin } from '@udecode/plate-juice';\nimport { KbdPlugin } from '@udecode/plate-kbd/react';\nimport { ColumnPlugin } from '@udecode/plate-layout/react';\nimport { LineHeightPlugin } from '@udecode/plate-line-height/react';\nimport { LinkPlugin } from '@udecode/plate-link/react';\nimport { ListPlugin, TodoListPlugin } from '@udecode/plate-list/react';\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\nimport { ImagePlugin, MediaEmbedPlugin } from '@udecode/plate-media/react';\nimport { MentionPlugin } from '@udecode/plate-mention/react';\nimport { NodeIdPlugin } from '@udecode/plate-node-id';\nimport { NormalizeTypesPlugin } from '@udecode/plate-normalizers';\nimport { PlaywrightPlugin } from '@udecode/plate-playwright';\nimport { DeletePlugin, SelectOnBackspacePlugin } from '@udecode/plate-select';\nimport {\n  BlockMenuPlugin,\n  BlockSelectionPlugin,\n} from '@udecode/plate-selection/react';\nimport { SlashPlugin } from '@udecode/plate-slash-command/react';\nimport { TablePlugin } from '@udecode/plate-table/react';\nimport { TogglePlugin } from '@udecode/plate-toggle/react';\nimport { TrailingBlockPlugin } from '@udecode/plate-trailing-block';\nimport Prism from 'prismjs';\n\nimport { CheckPlugin } from '@/components/context/check-plugin';\nimport { settingsStore } from '@/components/context/settings-store';\nimport { aiPlugins } from '@/lib/plate/demo/plugins/ai-plugins';\nimport { getAutoformatOptions } from '@/lib/plate/demo/plugins/autoformatOptions';\nimport { copilotPlugins } from '@/lib/plate/demo/plugins/copilot-plugins';\nimport { createPlateUI } from '@/plate/create-plate-ui';\nimport { editableProps } from '@/plate/demo/editableProps';\nimport { isEnabled } from '@/plate/demo/is-enabled';\nimport { DragOverCursorPlugin } from '@/plate/demo/plugins/DragOverCursorPlugin';\nimport { exitBreakPlugin } from '@/plate/demo/plugins/exitBreakPlugin';\nimport { resetBlockTypePlugin } from '@/plate/demo/plugins/resetBlockTypePlugin';\nimport { softBreakPlugin } from '@/plate/demo/plugins/softBreakPlugin';\nimport { tabbablePlugin } from '@/plate/demo/plugins/tabbablePlugin';\nimport { commentsData, usersData } from '@/plate/demo/values/commentsValue';\nimport { usePlaygroundValue } from '@/plate/demo/values/usePlaygroundValue';\nimport { BlockContextMenu } from '@/components/plate-ui/block-context-menu';\nimport { CommentsPopover } from '@/components/plate-ui/comments-popover';\nimport {\n  CursorOverlay,\n  SelectionOverlayPlugin,\n} from '@/components/plate-ui/cursor-overlay';\nimport { Editor, EditorContainer } from '@/components/plate-ui/editor';\nimport { FixedToolbar } from '@/components/plate-ui/fixed-toolbar';\nimport { FixedToolbarButtons } from '@/components/plate-ui/fixed-toolbar-buttons';\nimport { FloatingToolbar } from '@/components/plate-ui/floating-toolbar';\nimport { FloatingToolbarButtons } from '@/components/plate-ui/floating-toolbar-buttons';\nimport { ImagePreview } from '@/components/plate-ui/image-preview';\nimport {\n  FireLiComponent,\n  FireMarker,\n} from '@/components/plate-ui/indent-fire-marker';\nimport {\n  TodoLi,\n  TodoMarker,\n} from '@/components/plate-ui/indent-todo-marker';\nimport { LinkFloatingToolbar } from '@/components/plate-ui/link-floating-toolbar';\n\nimport { usePlaygroundEnabled } from './usePlaygroundEnabled';\n\nexport const usePlaygroundEditor = (id: any = '', scrollSelector?: string) => {\n  const enabledPlugins = settingsStore.use.checkedPlugins();\n  const overridePlugins = usePlaygroundEnabled(id);\n  const autoformatOptions = getAutoformatOptions(id, enabledPlugins);\n\n  const value = usePlaygroundValue(id);\n  const key = settingsStore.use.version();\n  const editorId = id || 'playground-' + key;\n\n  return usePlateEditor(\n    {\n      id: editorId,\n      override: {\n        components: createPlateUI({\n          draggable: isEnabled('dnd', id),\n          placeholder: isEnabled('placeholder', id),\n        }),\n        plugins: overridePlugins,\n      },\n      plugins: [\n        // AI\n        ...(id === 'ai' || enabledPlugins[AIChatPlugin.key] ? aiPlugins : []),\n        ...(id === 'copilot' || enabledPlugins[CopilotPlugin.key]\n          ? copilotPlugins\n          : []),\n        // Nodes\n        HeadingPlugin,\n        TocPlugin.configure({\n          options: {\n            scrollContainerSelector: `#${scrollSelector}`,\n            topOffset: 80,\n          },\n        }),\n        BlockquotePlugin,\n        CodeBlockPlugin.configure({\n          options: {\n            prism: Prism,\n          },\n        }),\n        HorizontalRulePlugin,\n        LinkPlugin.extend({\n          render: { afterEditable: () => <LinkFloatingToolbar /> },\n        }),\n        ...(id === 'list' ? [ListPlugin] : []),\n        ImagePlugin.extend({\n          render: { afterEditable: ImagePreview },\n        }),\n        MediaEmbedPlugin,\n        CaptionPlugin.configure({\n          options: {\n            plugins: [ImagePlugin, MediaEmbedPlugin],\n          },\n        }),\n        DatePlugin,\n        MentionPlugin.configure({\n          options: {\n            triggerPreviousCharPattern: /^$|^[\\s\"']$/,\n          },\n        }),\n        SlashPlugin,\n        TablePlugin.configure({\n          options: {\n            enableMerging: id === 'tableMerge',\n          },\n        }),\n        ColumnPlugin,\n        SelectionOverlayPlugin,\n\n        TodoListPlugin,\n        TogglePlugin,\n        ExcalidrawPlugin,\n        // Marks\n        BoldPlugin,\n        ItalicPlugin,\n        UnderlinePlugin,\n        StrikethroughPlugin,\n        CodePlugin,\n        SubscriptPlugin,\n        SuperscriptPlugin,\n        FontColorPlugin,\n        FontBackgroundColorPlugin,\n        FontSizePlugin,\n        HighlightPlugin,\n        KbdPlugin,\n\n        // Block Style\n        AlignPlugin.extend({\n          inject: {\n            targetPlugins: [\n              ParagraphPlugin.key,\n              MediaEmbedPlugin.key,\n              HEADING_KEYS.h1,\n              HEADING_KEYS.h2,\n              HEADING_KEYS.h3,\n              HEADING_KEYS.h4,\n              HEADING_KEYS.h5,\n              ImagePlugin.key,\n              HEADING_KEYS.h6,\n            ],\n          },\n        }),\n        IndentPlugin.extend({\n          inject: {\n            targetPlugins: [\n              ParagraphPlugin.key,\n              HEADING_KEYS.h1,\n              HEADING_KEYS.h2,\n              HEADING_KEYS.h3,\n              HEADING_KEYS.h4,\n              HEADING_KEYS.h5,\n              HEADING_KEYS.h6,\n              BlockquotePlugin.key,\n              CodeBlockPlugin.key,\n              TogglePlugin.key,\n            ],\n          },\n        }),\n        IndentListPlugin.extend({\n          inject: {\n            targetPlugins: [\n              ParagraphPlugin.key,\n              HEADING_KEYS.h1,\n              HEADING_KEYS.h2,\n              HEADING_KEYS.h3,\n              HEADING_KEYS.h4,\n              HEADING_KEYS.h5,\n              HEADING_KEYS.h6,\n              BlockquotePlugin.key,\n              CodeBlockPlugin.key,\n              TogglePlugin.key,\n            ],\n          },\n          options: {\n            listStyleTypes: {\n              fire: {\n                liComponent: FireLiComponent,\n                markerComponent: FireMarker,\n                type: 'fire',\n              },\n              todo: {\n                liComponent: TodoLi,\n                markerComponent: TodoMarker,\n                type: 'todo',\n              },\n            },\n          },\n        }),\n        LineHeightPlugin.extend({\n          inject: {\n            nodeProps: {\n              defaultNodeValue: 1.5,\n              validNodeValues: [1, 1.2, 1.5, 2, 3],\n            },\n            targetPlugins: [\n              ParagraphPlugin.key,\n              HEADING_KEYS.h1,\n              HEADING_KEYS.h2,\n              HEADING_KEYS.h3,\n              HEADING_KEYS.h4,\n              HEADING_KEYS.h5,\n              HEADING_KEYS.h6,\n            ],\n          },\n        }),\n\n        // Functionality\n        AutoformatPlugin.configure({\n          options: autoformatOptions,\n        }),\n        BlockSelectionPlugin.configure({\n          options: {\n            areaOptions: {\n              behaviour: {\n                scrolling: {\n                  speedDivider: 1.5,\n                },\n                startThreshold: 10,\n              },\n              boundaries: `#${scrollSelector}`,\n              container: `#${scrollSelector}`,\n              selectables: [`#${scrollSelector} .slate-selectable`],\n              selectionAreaClass: 'slate-selection-area',\n            },\n            enableContextMenu: true,\n          },\n        }),\n        BlockMenuPlugin.configure({\n          render: { aboveEditable: BlockContextMenu },\n        }),\n        DndPlugin.configure({ options: { enableScroller: true } }),\n        EmojiPlugin,\n        exitBreakPlugin,\n        NodeIdPlugin,\n        NormalizeTypesPlugin.configure({\n          options: {\n            rules: [{ path: [0], strictType: HEADING_KEYS.h1 }],\n          },\n        }),\n        resetBlockTypePlugin,\n        SelectOnBackspacePlugin.configure({\n          options: {\n            query: {\n              allow: [ImagePlugin.key, HorizontalRulePlugin.key],\n            },\n          },\n        }),\n        DeletePlugin,\n        SingleLinePlugin,\n        softBreakPlugin,\n        tabbablePlugin,\n        TrailingBlockPlugin.configure({\n          options: { type: ParagraphPlugin.key },\n        }),\n        DragOverCursorPlugin,\n\n        // Collaboration\n        CommentsPlugin.configure({\n          options: {\n            comments: commentsData,\n            myUserId: '1',\n            users: usersData,\n          },\n        }),\n\n        // Deserialization\n        DocxPlugin,\n        MarkdownPlugin.configure({ options: { indentList: true } }),\n        JuicePlugin,\n\n        // Testing\n        PlaywrightPlugin.configure({\n          enabled: process.env.NODE_ENV !== 'production',\n        }),\n      ],\n      value: value,\n    },\n    []\n  );\n};\n\nexport default function PlaygroundDemo({\n  id,\n  className,\n  scrollSelector,\n}: {\n  id?: ValueId;\n  className?: string;\n  scrollSelector?: string;\n}) {\n  const containerRef = useRef(null);\n  const enabled = settingsStore.use.checkedComponents();\n\n  const editor = usePlaygroundEditor(\n    id,\n    scrollSelector ?? `blockSelection-${id}`\n  );\n\n  return (\n    <DemoId id={id}>\n      <Plate editor={editor}>\n        <CheckPlugin componentId=\"fixed-toolbar\">\n          <FixedToolbar className=\"no-scrollbar\">\n            <CheckPlugin componentId=\"fixed-toolbar-buttons\">\n              <FixedToolbarButtons />\n            </CheckPlugin>\n          </FixedToolbar>\n        </CheckPlugin>\n\n        <div id=\"editor-playground\" className=\"flex w-full\">\n          <EditorContainer\n            id={scrollSelector ?? `blockSelection-${id}`}\n            ref={containerRef}\n            variant=\"demo\"\n            className={cn(id && 'max-h-[500px]', className)}\n          >\n            <Editor\n              {...editableProps}\n              variant=\"demo\"\n              className={cn(\n                editableProps.className,\n                // 'overflow-x-auto rounded-none',\n                !id && 'pb-[20vh] pt-4',\n                id && 'pb-8 pt-2'\n              )}\n              placeholder=\"Type...\"\n            />\n\n            <CheckPlugin componentId=\"floating-toolbar\">\n              <FloatingToolbar\n                state={{\n                  // hideToolbar: aiOpen,\n                  showWhenReadOnly: isEnabled(\n                    'comment',\n                    id,\n                    enabled[CommentsPlugin.key]\n                  ),\n                }}\n              >\n                <CheckPlugin componentId=\"floating-toolbar-buttons\">\n                  <FloatingToolbarButtons />\n                </CheckPlugin>\n              </FloatingToolbar>\n            </CheckPlugin>\n\n            <CheckPlugin id=\"cursoroverlay\" plugin={DragOverCursorPlugin}>\n              <CursorOverlay containerRef={containerRef} />\n            </CheckPlugin>\n          </EditorContainer>\n\n          <CheckPlugin\n            id=\"comment\"\n            componentId=\"comments-popover\"\n            plugin={CommentsPlugin}\n          >\n            <CommentsPopover />\n          </CheckPlugin>\n        </div>\n      </Plate>\n    </DemoId>\n  );\n}\n\nconst DemoIdContext = React.createContext<string | undefined>(undefined);\n\nexport function DemoId({\n  id,\n  children,\n}: {\n  children: React.ReactNode;\n  id?: string;\n}) {\n  return <DemoIdContext.Provider value={id}>{children}</DemoIdContext.Provider>;\n}\n\nexport function useDemoId() {\n  return React.useContext(DemoIdContext);\n}\n",
      "path": "example/playground-demo.tsx",
      "target": "components/playground-demo.tsx",
      "type": "registry:example"
    }
  ],
  "name": "toc-demo",
  "registryDependencies": [],
  "type": "registry:example"
}
{
  "dependencies": [
    "@udecode/plate-floating"
  ],
  "doc": {
    "description": "A contextual toolbar that appears over selected text.",
    "docs": [
      {
        "route": "/docs/api/floating"
      },
      {
        "route": "https://pro.platejs.org/docs/components/floating-toolbar"
      }
    ],
    "examples": [
      "floating-toolbar-demo",
      "floating-toolbar-pro"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn, withRef } from '@udecode/cn';\nimport {\n  useComposedRef,\n  useEditorId,\n  useEditorRef,\n  useEventEditorSelectors,\n} from '@udecode/plate-common/react';\nimport {\n  type FloatingToolbarState,\n  flip,\n  offset,\n  useFloatingToolbar,\n  useFloatingToolbarState,\n} from '@udecode/plate-floating';\n\nimport { Toolbar } from './toolbar';\n\nexport const FloatingToolbar = withRef<\n  typeof Toolbar,\n  {\n    state?: FloatingToolbarState;\n  }\n>(({ children, state, ...props }, componentRef) => {\n  const editor = useEditorRef();\n  const editorId = useEditorId();\n  const focusedEditorId = useEventEditorSelectors.focus();\n  const isFloatingLinkOpen = !!editor.useOption({ key: 'a' }, 'mode');\n  const isAIChatOpen = editor.useOption({ key: 'aiChat' }, 'open');\n\n  const floatingToolbarState = useFloatingToolbarState({\n    editorId,\n    focusedEditorId,\n    hideToolbar: isFloatingLinkOpen || isAIChatOpen,\n    ...state,\n    floatingOptions: {\n      middleware: [\n        offset(12),\n        flip({\n          fallbackPlacements: [\n            'top-start',\n            'top-end',\n            'bottom-start',\n            'bottom-end',\n          ],\n          padding: 12,\n        }),\n      ],\n      placement: 'top',\n      ...state?.floatingOptions,\n    },\n  });\n\n  const {\n    clickOutsideRef,\n    hidden,\n    props: rootProps,\n    ref: floatingRef,\n  } = useFloatingToolbar(floatingToolbarState);\n\n  const ref = useComposedRef<HTMLDivElement>(componentRef, floatingRef);\n\n  if (hidden) return null;\n\n  return (\n    <div ref={clickOutsideRef}>\n      <Toolbar\n        ref={ref}\n        className={cn(\n          'absolute z-50 overflow-x-auto whitespace-nowrap rounded-md border bg-popover p-1 opacity-100 shadow-md scrollbar-hide print:hidden',\n          'max-w-[80vw]'\n        )}\n        {...rootProps}\n        {...props}\n      >\n        {children}\n      </Toolbar>\n    </div>\n  );\n});\n",
      "path": "plate-ui/floating-toolbar.tsx",
      "target": "components/plate-ui/floating-toolbar.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "floating-toolbar",
  "registryDependencies": [
    "toolbar"
  ],
  "type": "registry:ui"
}
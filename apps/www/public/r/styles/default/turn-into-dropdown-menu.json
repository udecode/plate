{
  "dependencies": [
    "@radix-ui/react-dropdown-menu",
    "@udecode/plate-block-quote",
    "@udecode/plate-code-block",
    "@udecode/plate-heading",
    "@udecode/plate-indent-list",
    "@udecode/plate-toggle"
  ],
  "doc": {
    "description": "A menu for converting between different block types.",
    "docs": [
      {
        "route": "https://pro.platejs.org/docs/components/turn-into-dropdown-menu"
      }
    ],
    "examples": [
      "basic-nodes-demo",
      "basic-nodes-pro"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport type { DropdownMenuProps } from '@radix-ui/react-dropdown-menu';\n\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { CodeBlockPlugin } from '@udecode/plate-code-block/react';\nimport {\n  ParagraphPlugin,\n  focusEditor,\n  useEditorRef,\n  useSelectionFragmentProp,\n} from '@udecode/plate-common/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { INDENT_LIST_KEYS, ListStyleType } from '@udecode/plate-indent-list';\nimport { TogglePlugin } from '@udecode/plate-toggle/react';\nimport {\n  ChevronRightIcon,\n  Columns3Icon,\n  FileCodeIcon,\n  Heading1Icon,\n  Heading2Icon,\n  Heading3Icon,\n  ListIcon,\n  ListOrderedIcon,\n  PilcrowIcon,\n  QuoteIcon,\n  SquareIcon,\n} from 'lucide-react';\n\nimport {\n  getBlockType,\n  setBlockType,\n} from '@/components/editor/transforms';\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuTrigger,\n  useOpenState,\n} from './dropdown-menu';\nimport { ToolbarButton } from './toolbar';\n\nconst turnIntoItems = [\n  {\n    icon: <PilcrowIcon />,\n    keywords: ['paragraph'],\n    label: 'Text',\n    value: ParagraphPlugin.key,\n  },\n  {\n    icon: <Heading1Icon />,\n    keywords: ['title', 'h1'],\n    label: 'Heading 1',\n    value: HEADING_KEYS.h1,\n  },\n  {\n    icon: <Heading2Icon />,\n    keywords: ['subtitle', 'h2'],\n    label: 'Heading 2',\n    value: HEADING_KEYS.h2,\n  },\n  {\n    icon: <Heading3Icon />,\n    keywords: ['subtitle', 'h3'],\n    label: 'Heading 3',\n    value: HEADING_KEYS.h3,\n  },\n  {\n    icon: <ListIcon />,\n    keywords: ['unordered', 'ul', '-'],\n    label: 'Bulleted list',\n    value: ListStyleType.Disc,\n  },\n  {\n    icon: <ListOrderedIcon />,\n    keywords: ['ordered', 'ol', '1'],\n    label: 'Numbered list',\n    value: ListStyleType.Decimal,\n  },\n  {\n    icon: <SquareIcon />,\n    keywords: ['checklist', 'task', 'checkbox', '[]'],\n    label: 'To-do list',\n    value: INDENT_LIST_KEYS.todo,\n  },\n  {\n    icon: <ChevronRightIcon />,\n    keywords: ['collapsible', 'expandable'],\n    label: 'Toggle list',\n    value: TogglePlugin.key,\n  },\n  {\n    icon: <FileCodeIcon />,\n    keywords: ['```'],\n    label: 'Code',\n    value: CodeBlockPlugin.key,\n  },\n  {\n    icon: <QuoteIcon />,\n    keywords: ['citation', 'blockquote', '>'],\n    label: 'Quote',\n    value: BlockquotePlugin.key,\n  },\n  {\n    icon: <Columns3Icon />,\n    label: '3 columns',\n    value: 'action_three_columns',\n  },\n];\n\nexport function TurnIntoDropdownMenu(props: DropdownMenuProps) {\n  const editor = useEditorRef();\n  const openState = useOpenState();\n\n  const value = useSelectionFragmentProp({\n    defaultValue: ParagraphPlugin.key,\n    getProp: (node) => getBlockType(node as any),\n  });\n  const selectedItem = React.useMemo(\n    () =>\n      turnIntoItems.find(\n        (item) => item.value === (value ?? ParagraphPlugin.key)\n      ) ?? turnIntoItems[0],\n    [value]\n  );\n\n  return (\n    <DropdownMenu modal={false} {...openState} {...props}>\n      <DropdownMenuTrigger asChild>\n        <ToolbarButton pressed={openState.open} tooltip=\"Turn into\" isDropdown>\n          {selectedItem.label}\n        </ToolbarButton>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent\n        className=\"ignore-click-outside/toolbar min-w-0\"\n        align=\"start\"\n      >\n        <DropdownMenuRadioGroup\n          value={value}\n          onValueChange={(type) => {\n            setBlockType(editor, type);\n            focusEditor(editor);\n          }}\n          label=\"Turn into\"\n        >\n          {turnIntoItems.map(({ icon, label, value: itemValue }) => (\n            <DropdownMenuRadioItem\n              key={itemValue}\n              className=\"min-w-[180px]\"\n              value={itemValue}\n            >\n              {icon}\n              {label}\n            </DropdownMenuRadioItem>\n          ))}\n        </DropdownMenuRadioGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "path": "plate-ui/turn-into-dropdown-menu.tsx",
      "target": "components/plate-ui/turn-into-dropdown-menu.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "turn-into-dropdown-menu",
  "registryDependencies": [
    "dropdown-menu",
    "toolbar",
    "transforms"
  ],
  "type": "registry:ui"
}
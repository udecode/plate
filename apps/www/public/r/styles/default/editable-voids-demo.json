{
  "files": [
    {
      "content": "'use client';\n\nimport React, { useState } from 'react';\n\nimport type { PlateRenderElementProps } from '@udecode/plate-common/react';\n\nimport { BasicElementsPlugin } from '@udecode/plate-basic-elements/react';\nimport { BasicMarksPlugin } from '@udecode/plate-basic-marks/react';\nimport { ExitBreakPlugin } from '@udecode/plate-break/react';\nimport {\n  Plate,\n  createPlatePlugin,\n  usePlateEditor,\n} from '@udecode/plate-common/react';\n\nimport { Label } from '@/components/ui/label';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { editableProps } from '@/plate/demo/editableProps';\nimport { PlateUI } from '@/plate/demo/plate-ui';\nimport { resetBlockTypePlugin } from '@/plate/demo/plugins/resetBlockTypePlugin';\nimport { softBreakPlugin } from '@/plate/demo/plugins/softBreakPlugin';\nimport { editableVoidsValue } from '@/plate/demo/values/editableVoidsValue';\nimport { Editor, EditorContainer } from '@/components/plate-ui/editor';\nimport { Input } from '@/components/plate-ui/input';\n\nexport const EditableVoidPlugin = createPlatePlugin({\n  key: 'editable-void',\n  node: {\n    component: EditableVoidElement,\n    isElement: true,\n    isVoid: true,\n  },\n});\n\nexport function EditableVoidElement({\n  attributes,\n  children,\n}: PlateRenderElementProps) {\n  const [inputValue, setInputValue] = useState('');\n\n  const editor = usePlateEditor({\n    id: 'editable-void-basic-elements',\n    override: { components: PlateUI },\n    plugins: [\n      BasicElementsPlugin,\n      resetBlockTypePlugin,\n      softBreakPlugin,\n      ExitBreakPlugin,\n    ],\n  });\n\n  return (\n    // Need contentEditable=false or Firefox has issues with certain input types.\n    <div {...attributes} contentEditable={false}>\n      <div className=\"mt-2 grid gap-6 rounded-md border p-6 shadow\">\n        <Input\n          id=\"name\"\n          className=\"my-2\"\n          value={inputValue}\n          onChange={(e) => {\n            setInputValue(e.target.value);\n          }}\n          placeholder=\"Name\"\n          type=\"text\"\n        />\n\n        <div className=\"grid w-full max-w-sm items-center gap-2\">\n          <Label htmlFor=\"handed\">Left or right handed:</Label>\n\n          <RadioGroup id=\"handed\" defaultValue=\"r1\">\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem id=\"r1\" value=\"r1\" />\n              <Label htmlFor=\"r1\">Left</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem id=\"r2\" value=\"r2\" />\n              <Label htmlFor=\"r2\">Right</Label>\n            </div>\n          </RadioGroup>\n        </div>\n\n        <div className=\"grid gap-2\">\n          <Label htmlFor=\"editable-void-basic-elements\">\n            Tell us about yourself:\n          </Label>\n\n          <Plate\n            editor={editor}\n            // initialValue={basicElementsValue}\n          >\n            <EditorContainer>\n              <Editor {...editableProps} />\n            </EditorContainer>\n          </Plate>\n        </div>\n      </div>\n      {children}\n    </div>\n  );\n}\n\nexport default function EditableVoidsDemo() {\n  const editor = usePlateEditor({\n    override: { components: PlateUI },\n    plugins: [BasicElementsPlugin, BasicMarksPlugin, EditableVoidPlugin],\n    value: editableVoidsValue,\n  });\n\n  return (\n    <div className=\"p-10\">\n      <Plate editor={editor}>\n        <EditorContainer>\n          <Editor {...editableProps} />\n        </EditorContainer>\n      </Plate>\n    </div>\n  );\n}\n",
      "path": "example/editable-voids-demo.tsx",
      "target": "components/editable-voids-demo.tsx",
      "type": "registry:example"
    }
  ],
  "name": "editable-voids-demo",
  "registryDependencies": [],
  "type": "registry:example"
}
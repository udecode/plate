{
  "dependencies": [
    "@udecode/plate-dnd",
    "@udecode/plate-selection",
    "@udecode/plate-block-quote",
    "@udecode/plate-excalidraw",
    "@udecode/plate-heading",
    "@udecode/plate-layout",
    "@udecode/plate-table",
    "@udecode/plate-toggle",
    "@udecode/plate-media",
    "react-dnd",
    "react-dnd-html5-backend"
  ],
  "doc": {
    "description": "A drag handle for moving editor blocks.",
    "docs": [
      {
        "route": "/docs/dnd",
        "title": "Drag & Drop"
      },
      {
        "route": "https://pro.platejs.org/docs/components/draggable"
      }
    ],
    "examples": [
      "dnd-demo",
      "dnd-pro"
    ],
    "usage": [
      "import { DndPlugin } from '@udecode/plate-dnd';\nimport { NodeIdPlugin } from '@udecode/plate-node-id';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { withDraggables } from './withDraggables';",
      "export function MyEditor() {\n  const editor = usePlateEditor({\n    plugins: [\n      // ...otherPlugins,\n      NodeIdPlugin,\n      DndPlugin.configure({ options: { enableScroller: true } }),\n    ],\n    override: {\n      components: withDraggables({\n        // ...components\n      }),\n    }\n  });\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Plate editor={editor}>\n        <PlateContent />\n      </Plate>\n    </DndProvider>\n  );\n}"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport type { TEditor } from '@udecode/plate-common';\nimport type { DropTargetMonitor } from 'react-dnd';\n\nimport { cn, withRef } from '@udecode/cn';\nimport {\n  type PlateElementProps,\n  MemoizedChildren,\n  useEditorPlugin,\n  useEditorRef,\n  withHOC,\n} from '@udecode/plate-common/react';\nimport {\n  type DragItemNode,\n  DraggableProvider,\n  useDraggable,\n  useDraggableGutter,\n  useDraggableState,\n  useDropLine,\n} from '@udecode/plate-dnd';\nimport { BlockSelectionPlugin } from '@udecode/plate-selection/react';\nimport { GripVertical } from 'lucide-react';\nimport { useSelected } from 'slate-react';\n\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipPortal,\n  TooltipProvider,\n  TooltipTrigger,\n} from './tooltip';\n\nexport interface DraggableProps extends PlateElementProps {\n  /**\n   * Intercepts the drop handling. If `false` is returned, the default drop\n   * behavior is called after. If `true` is returned, the default behavior is\n   * not called.\n   */\n  onDropHandler?: (\n    editor: TEditor,\n    props: {\n      id: string;\n      dragItem: DragItemNode;\n      monitor: DropTargetMonitor<DragItemNode, unknown>;\n      nodeRef: any;\n    }\n  ) => boolean;\n}\n\nexport const Draggable = withHOC(\n  DraggableProvider,\n  withRef<'div', DraggableProps>(\n    ({ className, onDropHandler, ...props }, ref) => {\n      const { children, element } = props;\n\n      const state = useDraggableState({ element, onDropHandler });\n      const { isDragging } = state;\n      const { previewRef, handleRef } = useDraggable(state);\n\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            'relative',\n            isDragging && 'opacity-50',\n            'group',\n            className\n          )}\n        >\n          <Gutter>\n            <div className={cn('slate-blockToolbarWrapper', 'flex h-[1.5em]')}>\n              <div\n                className={cn(\n                  'slate-blockToolbar',\n                  'pointer-events-auto mr-1 flex items-center'\n                )}\n              >\n                <div ref={handleRef} className=\"size-4\">\n                  <DragHandle />\n                </div>\n              </div>\n            </div>\n          </Gutter>\n\n          <div ref={previewRef} className=\"slate-blockWrapper\">\n            <MemoizedChildren>{children}</MemoizedChildren>\n\n            <DropLine />\n          </div>\n        </div>\n      );\n    }\n  )\n);\n\nconst Gutter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...props }, ref) => {\n  const { useOption } = useEditorPlugin(BlockSelectionPlugin);\n  const isSelectionAreaVisible = useOption('isSelectionAreaVisible');\n  const gutter = useDraggableGutter();\n  const selected = useSelected();\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'slate-gutterLeft',\n        'absolute -top-px z-50 flex h-full -translate-x-full cursor-text hover:opacity-100 sm:opacity-0 main-hover:group-hover:opacity-100',\n        isSelectionAreaVisible && 'hidden',\n        !selected && 'opacity-0',\n        className\n      )}\n      {...props}\n      {...gutter.props}\n    >\n      {children}\n    </div>\n  );\n});\n\nconst DragHandle = React.memo(() => {\n  const editor = useEditorRef();\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger type=\"button\">\n          <GripVertical\n            className=\"size-4 text-muted-foreground\"\n            onClick={(event) => {\n              event.stopPropagation();\n              event.preventDefault();\n            }}\n            onMouseDown={() => {\n              editor\n                .getApi(BlockSelectionPlugin)\n                .blockSelection?.resetSelectedIds();\n            }}\n          />\n        </TooltipTrigger>\n        <TooltipPortal>\n          <TooltipContent>Drag to move</TooltipContent>\n        </TooltipPortal>\n      </Tooltip>\n    </TooltipProvider>\n  );\n});\n\nconst DropLine = React.memo(\n  React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n    ({ children, className, ...props }, ref) => {\n      const state = useDropLine();\n\n      if (!state.dropLine) return null;\n\n      return (\n        <div\n          ref={ref}\n          {...props}\n          {...state.props}\n          className={cn(\n            'slate-dropLine',\n            'absolute inset-x-0 h-0.5 opacity-100 transition-opacity',\n            'bg-brand/50',\n            state.dropLine === 'top' && '-top-px',\n            state.dropLine === 'bottom' && '-bottom-px',\n            className\n          )}\n        >\n          {children}\n        </div>\n      );\n    }\n  )\n);\n",
      "path": "plate-ui/draggable.tsx",
      "target": "components/plate-ui/draggable.tsx",
      "type": "registry:ui"
    },
    {
      "content": "'use client';\n\nimport type { FC } from 'react';\n\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { CodeBlockPlugin } from '@udecode/plate-code-block/react';\nimport {\n  ParagraphPlugin,\n  createNodesWithHOC,\n} from '@udecode/plate-common/react';\nimport {\n  type WithDraggableOptions,\n  withDraggable as withDraggablePrimitive,\n} from '@udecode/plate-dnd';\nimport { ExcalidrawPlugin } from '@udecode/plate-excalidraw/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { ColumnPlugin } from '@udecode/plate-layout/react';\nimport {\n  ImagePlugin,\n  MediaEmbedPlugin,\n  PlaceholderPlugin,\n} from '@udecode/plate-media/react';\nimport { TablePlugin } from '@udecode/plate-table/react';\nimport { TogglePlugin } from '@udecode/plate-toggle/react';\n\nimport { type DraggableProps, Draggable } from './draggable';\n\nexport const withDraggable = (\n  Component: FC,\n  options?: WithDraggableOptions<\n    Partial<Omit<DraggableProps, 'children' | 'editor' | 'element'>>\n  >\n) =>\n  withDraggablePrimitive<DraggableProps>(Draggable, Component, options as any);\n\nexport const withDraggablesPrimitive = createNodesWithHOC(withDraggable);\n\nexport const withDraggables = (components: any) => {\n  return withDraggablesPrimitive(components, [\n    {\n      keys: [ParagraphPlugin.key, 'ul', 'ol'],\n      level: 0,\n    },\n    {\n      key: HEADING_KEYS.h1,\n      draggableProps: {\n        className:\n          '[&_.slate-blockToolbarWrapper]:h-[1.3em] [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-1 [&_.slate-gutterLeft]:text-[1.875em]',\n      },\n    },\n    {\n      key: HEADING_KEYS.h2,\n      draggableProps: {\n        className:\n          '[&_.slate-blockToolbarWrapper]:h-[1.3em] [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-1 [&_.slate-gutterLeft]:text-[1.5em]',\n      },\n    },\n    {\n      key: HEADING_KEYS.h3,\n      draggableProps: {\n        className:\n          '[&_.slate-blockToolbarWrapper]:h-[1.3em] [&_.slate-gutterLeft]:pt-[2px] [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-1 [&_.slate-gutterLeft]:text-[1.25em]',\n      },\n    },\n    {\n      keys: [HEADING_KEYS.h4, HEADING_KEYS.h5],\n      draggableProps: {\n        className:\n          '[&_.slate-blockToolbarWrapper]:h-[1.3em] [&_.slate-gutterLeft]:pt-[3px] [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-0 [&_.slate-gutterLeft]:text-[1.1em]',\n      },\n    },\n    {\n      keys: [ParagraphPlugin.key],\n      draggableProps: {\n        className:\n          '[&_.slate-gutterLeft]:pt-[3px] [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-0',\n      },\n    },\n    {\n      keys: [HEADING_KEYS.h6, 'ul', 'ol'],\n      draggableProps: {\n        className: '[&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-0',\n      },\n    },\n    {\n      key: BlockquotePlugin.key,\n      draggableProps: {\n        className: '[&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-0',\n      },\n    },\n    {\n      key: CodeBlockPlugin.key,\n      draggableProps: {\n        className:\n          '[&_.slate-gutterLeft]:pt-6 [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-0',\n      },\n    },\n    {\n      key: ImagePlugin.key,\n      draggableProps: {\n        className:\n          '[&_.slate-gutterLeft]:pt-0 [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-0',\n      },\n    },\n    {\n      key: MediaEmbedPlugin.key,\n      draggableProps: {\n        className:\n          '[&_.slate-gutterLeft]:pt-0 [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-0',\n      },\n    },\n    {\n      key: ExcalidrawPlugin.key,\n      draggableProps: {\n        className:\n          '[&_.slate-gutterLeft]:pt-0 [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-0',\n      },\n    },\n    {\n      key: TogglePlugin.key,\n      draggableProps: {\n        className:\n          '[&_.slate-gutterLeft]:pt-0 [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-0',\n      },\n    },\n    {\n      key: ColumnPlugin.key,\n      draggableProps: {\n        className:\n          '[&_.slate-gutterLeft]:pt-0 [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-0',\n      },\n    },\n    {\n      key: PlaceholderPlugin.key,\n      draggableProps: {\n        className:\n          '[&_.slate-gutterLeft]:pt-3 [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-0',\n      },\n    },\n    {\n      key: TablePlugin.key,\n      draggableProps: {\n        className:\n          '[&_.slate-gutterLeft]:pt-3 [&_.slate-gutterLeft]:px-0 [&_.slate-gutterLeft]:pb-0',\n      },\n    },\n  ]);\n};\n",
      "path": "plate-ui/with-draggables.tsx",
      "target": "components/plate-ui/with-draggables.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "draggable",
  "registryDependencies": [
    "tooltip",
    "use-mounted"
  ],
  "type": "registry:ui"
}
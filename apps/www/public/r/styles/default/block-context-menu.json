{
  "dependencies": [
    "@udecode/plate-ai",
    "@udecode/plate-block-quote",
    "@udecode/plate-heading",
    "@udecode/plate-indent-list",
    "@udecode/plate-selection"
  ],
  "doc": {
    "description": "A context menu for block-level operations.",
    "docs": [
      {
        "route": "/docs/block-menu"
      },
      {
        "route": "https://pro.platejs.org/docs/components/block-context-menu"
      }
    ],
    "examples": [
      "block-menu-demo",
      "block-menu-pro"
    ],
    "label": "New"
  },
  "files": [
    {
      "content": "'use client';\n\nimport { useCallback, useState } from 'react';\n\nimport { AIChatPlugin } from '@udecode/plate-ai/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { unsetNodes } from '@udecode/plate-common';\nimport {\n  ParagraphPlugin,\n  focusEditor,\n  useEditorPlugin,\n} from '@udecode/plate-common/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { IndentListPlugin } from '@udecode/plate-indent-list/react';\nimport {\n  BLOCK_CONTEXT_MENU_ID,\n  BlockMenuPlugin,\n  BlockSelectionPlugin,\n} from '@udecode/plate-selection/react';\n\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuGroup,\n  ContextMenuItem,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from './context-menu';\n\ntype Value = 'askAI' | null;\n\nexport function BlockContextMenu({ children }: { children: React.ReactNode }) {\n  const { api, editor } = useEditorPlugin(BlockMenuPlugin);\n  const [value, setValue] = useState<Value>(null);\n\n  const handleTurnInto = useCallback(\n    (type: string) => {\n      editor\n        .getApi(BlockSelectionPlugin)\n        .blockSelection.getNodes()\n        .forEach(([node, path]) => {\n          if (node[IndentListPlugin.key]) {\n            unsetNodes(editor, [IndentListPlugin.key, 'indent'], { at: path });\n          }\n\n          editor.tf.toggle.block({ type }, { at: path });\n        });\n    },\n    [editor]\n  );\n\n  const handleAlign = useCallback(\n    (align: 'center' | 'left' | 'right') => {\n      editor\n        .getTransforms(BlockSelectionPlugin)\n        .blockSelection.setNodes({ align });\n    },\n    [editor]\n  );\n\n  return (\n    <ContextMenu\n      onOpenChange={(open) => {\n        if (!open) {\n          // prevent unselect the block selection\n          setTimeout(() => {\n            api.blockMenu.hide();\n          }, 0);\n        }\n      }}\n      modal={false}\n    >\n      <ContextMenuTrigger\n        asChild\n        onContextMenu={(event) => {\n          const dataset = (event.target as HTMLElement).dataset;\n\n          const disabled = dataset?.slateEditor === 'true';\n\n          if (disabled) return event.preventDefault();\n\n          api.blockMenu.show(BLOCK_CONTEXT_MENU_ID, {\n            x: event.clientX,\n            y: event.clientY,\n          });\n        }}\n      >\n        <div className=\"w-full\">{children}</div>\n      </ContextMenuTrigger>\n      <ContextMenuContent\n        className=\"w-64\"\n        onCloseAutoFocus={(e) => {\n          e.preventDefault();\n          editor.getApi(BlockSelectionPlugin).blockSelection.focus();\n\n          if (value === 'askAI') {\n            editor.getApi(AIChatPlugin).aiChat.show();\n          }\n\n          setValue(null);\n        }}\n      >\n        <ContextMenuGroup>\n          <ContextMenuItem\n            onClick={() => {\n              setValue('askAI');\n            }}\n          >\n            Ask AI\n          </ContextMenuItem>\n          <ContextMenuItem\n            onClick={() => {\n              editor\n                .getTransforms(BlockSelectionPlugin)\n                .blockSelection.removeNodes();\n              focusEditor(editor);\n            }}\n          >\n            Delete\n          </ContextMenuItem>\n          <ContextMenuItem\n            onClick={() => {\n              editor\n                .getTransforms(BlockSelectionPlugin)\n                .blockSelection.duplicate(\n                  editor.getApi(BlockSelectionPlugin).blockSelection.getNodes()\n                );\n            }}\n          >\n            Duplicate\n            {/* <ContextMenuShortcut>âŒ˜ + D</ContextMenuShortcut> */}\n          </ContextMenuItem>\n          <ContextMenuSub>\n            <ContextMenuSubTrigger>Turn into</ContextMenuSubTrigger>\n            <ContextMenuSubContent className=\"w-48\">\n              <ContextMenuItem\n                onClick={() => handleTurnInto(ParagraphPlugin.key)}\n              >\n                Paragraph\n              </ContextMenuItem>\n\n              <ContextMenuItem onClick={() => handleTurnInto(HEADING_KEYS.h1)}>\n                Heading 1\n              </ContextMenuItem>\n              <ContextMenuItem onClick={() => handleTurnInto(HEADING_KEYS.h2)}>\n                Heading 2\n              </ContextMenuItem>\n              <ContextMenuItem onClick={() => handleTurnInto(HEADING_KEYS.h3)}>\n                Heading 3\n              </ContextMenuItem>\n              <ContextMenuItem\n                onClick={() => handleTurnInto(BlockquotePlugin.key)}\n              >\n                Blockquote\n              </ContextMenuItem>\n            </ContextMenuSubContent>\n          </ContextMenuSub>\n        </ContextMenuGroup>\n\n        <ContextMenuGroup>\n          <ContextMenuItem\n            onClick={() =>\n              editor\n                .getTransforms(BlockSelectionPlugin)\n                .blockSelection.setIndent(1)\n            }\n          >\n            Indent\n          </ContextMenuItem>\n          <ContextMenuItem\n            onClick={() =>\n              editor\n                .getTransforms(BlockSelectionPlugin)\n                .blockSelection.setIndent(-1)\n            }\n          >\n            Outdent\n          </ContextMenuItem>\n          <ContextMenuSub>\n            <ContextMenuSubTrigger>Align</ContextMenuSubTrigger>\n            <ContextMenuSubContent className=\"w-48\">\n              <ContextMenuItem onClick={() => handleAlign('left')}>\n                Left\n              </ContextMenuItem>\n              <ContextMenuItem onClick={() => handleAlign('center')}>\n                Center\n              </ContextMenuItem>\n              <ContextMenuItem onClick={() => handleAlign('right')}>\n                Right\n              </ContextMenuItem>\n            </ContextMenuSubContent>\n          </ContextMenuSub>\n        </ContextMenuGroup>\n      </ContextMenuContent>\n    </ContextMenu>\n  );\n}\n",
      "path": "plate-ui/block-context-menu.tsx",
      "target": "components/plate-ui/block-context-menu.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "block-context-menu",
  "registryDependencies": [
    "calendar",
    "plate-element",
    "context-menu"
  ],
  "type": "registry:ui"
}
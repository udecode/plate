{
  "files": [
    {
      "content": "'use client';\n\nimport React, { useState } from 'react';\n\nimport { withProps } from '@udecode/cn';\nimport {\n  BoldPlugin,\n  CodePlugin,\n  ItalicPlugin,\n  StrikethroughPlugin,\n  SubscriptPlugin,\n  SuperscriptPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n  CodeSyntaxPlugin,\n} from '@udecode/plate-code-block/react';\nimport { type Value, replaceNodeChildren } from '@udecode/plate-common';\nimport {\n  type PlateEditor,\n  ParagraphPlugin,\n  Plate,\n  PlateLeaf,\n  usePlateEditor,\n} from '@udecode/plate-common/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { HighlightPlugin } from '@udecode/plate-highlight/react';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport { KbdPlugin } from '@udecode/plate-kbd/react';\nimport { LinkPlugin } from '@udecode/plate-link/react';\nimport { MarkdownPlugin, deserializeMd } from '@udecode/plate-markdown';\nimport { InlineEquationPlugin } from '@udecode/plate-math/react';\nimport { ImagePlugin } from '@udecode/plate-media/react';\nimport {\n  TableCellHeaderPlugin,\n  TableCellPlugin,\n  TablePlugin,\n  TableRowPlugin,\n} from '@udecode/plate-table/react';\nimport { cloneDeep } from 'lodash';\nimport remarkEmoji from 'remark-emoji';\n\nimport { autoformatPlugin } from '@/components/editor/plugins/autoformat-plugin';\nimport { basicNodesPlugins } from '@/components/editor/plugins/basic-nodes-plugins';\nimport { indentListPlugins } from '@/components/editor/plugins/indent-list-plugins';\nimport { linkPlugin } from '@/components/editor/plugins/link-plugin';\nimport { mediaPlugins } from '@/components/editor/plugins/media-plugins';\nimport { tablePlugin } from '@/components/editor/plugins/table-plugin';\nimport { BlockquoteElement } from '@/components/plate-ui/blockquote-element';\nimport { CodeBlockElement } from '@/components/plate-ui/code-block-element';\nimport { CodeLeaf } from '@/components/plate-ui/code-leaf';\nimport { CodeLineElement } from '@/components/plate-ui/code-line-element';\nimport { CodeSyntaxLeaf } from '@/components/plate-ui/code-syntax-leaf';\nimport { Editor, EditorContainer } from '@/components/plate-ui/editor';\nimport { HeadingElement } from '@/components/plate-ui/heading-element';\nimport { HighlightLeaf } from '@/components/plate-ui/highlight-leaf';\nimport { HrElement } from '@/components/plate-ui/hr-element';\nimport { ImageElement } from '@/components/plate-ui/image-element';\nimport { KbdLeaf } from '@/components/plate-ui/kbd-leaf';\nimport { LinkElement } from '@/components/plate-ui/link-element';\nimport { ParagraphElement } from '@/components/plate-ui/paragraph-element';\nimport {\n  TableCellElement,\n  TableCellHeaderElement,\n} from '@/components/plate-ui/table-cell-element';\nimport { TableElement } from '@/components/plate-ui/table-element';\nimport { TableRowElement } from '@/components/plate-ui/table-row-element';\n\nconst initialMarkdown = `# Markdown syntax guide\n\n## Headers\n\n# This is a Heading h1\n## This is a Heading h2\n###### This is a Heading h6\n\n## Emphasis\n\n*This text will be italic*  \n_This will also be italic_\n\n**This text will be bold**  \n__This will also be bold__\n\n_You **can** combine them_\n\n## Lists\n\n### Unordered\n\n* Item 1\n* Item 2\n* Item 2a\n* Item 2b\n\n### Ordered\n\n1. Item 1\n2. Item 2\n3. Item 3\n    1. Item 3a\n    2. Item 3b\n\n## Images\n\n![This is an alt text.](https://images.unsplash.com/photo-1506619216599-9d16d0903dfd?q=80&w=2669&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D \"This is a sample image.\")\n\n## Links\n\nYou may be using [Markdown Live Preview](https://markdownlivepreview.com/).\n\n## Blockquotes\n\n> Markdown is a lightweight markup language with plain-text-formatting syntax, created in 2004 by John Gruber with Aaron Swartz.\n\n## Tables\n\n| Left columns  | Right columns |\n| ------------- |:-------------:|\n| left foo      | right foo     |\n| left bar      | right bar     |\n| left baz      | right baz     |\n\n## Blocks of code\n\n\\`\\`\\`js\nlet message = 'Hello world';\nalert(message);\n\\`\\`\\`\n\n## Inline code\n\nThis web site is using \\`plate\\`.\n\n## GitHub Flavored Markdown\n\n### Task Lists\n\n- [x] Completed task\n- [ ] Incomplete task\n- [x] @mentions, #refs, [links](), **formatting**, and <del>tags</del> supported\n- [ ] list syntax required (any unordered or ordered list supported)\n\n### Strikethrough\n\n~~This text is strikethrough~~\n\n### Autolinks\n\nVisit https://github.com automatically converts to a link\nEmail example@example.com also converts automatically\n\n### Emoji\n\n:smile: :heart:\n`;\n\nconst markdownPlugin = MarkdownPlugin.configure({\n  options: { indentList: true },\n});\n\nexport default function MarkdownDemo() {\n  const markdownEditor = usePlateEditor({\n    plugins: [markdownPlugin],\n    value: [{ children: [{ text: initialMarkdown }], type: 'p' }],\n  });\n\n  const [value, setValue] = useState<Value>([]);\n  const editor = usePlateEditor(\n    {\n      override: {\n        components: {\n          [BlockquotePlugin.key]: BlockquoteElement,\n          [BoldPlugin.key]: withProps(PlateLeaf, { as: 'strong' }),\n          [CodeBlockPlugin.key]: CodeBlockElement,\n          [CodeLinePlugin.key]: CodeLineElement,\n          [CodePlugin.key]: CodeLeaf,\n          [CodeSyntaxPlugin.key]: CodeSyntaxLeaf,\n          [HEADING_KEYS.h1]: withProps(HeadingElement, { variant: 'h1' }),\n          [HEADING_KEYS.h2]: withProps(HeadingElement, { variant: 'h2' }),\n          [HEADING_KEYS.h3]: withProps(HeadingElement, { variant: 'h3' }),\n          [HEADING_KEYS.h4]: withProps(HeadingElement, { variant: 'h4' }),\n          [HEADING_KEYS.h5]: withProps(HeadingElement, { variant: 'h5' }),\n          [HEADING_KEYS.h6]: withProps(HeadingElement, { variant: 'h6' }),\n          [HighlightPlugin.key]: HighlightLeaf,\n          [HorizontalRulePlugin.key]: HrElement,\n          [ImagePlugin.key]: ImageElement,\n          [ItalicPlugin.key]: withProps(PlateLeaf, { as: 'em' }),\n          [KbdPlugin.key]: KbdLeaf,\n          [LinkPlugin.key]: LinkElement,\n          [ParagraphPlugin.key]: ParagraphElement,\n          [StrikethroughPlugin.key]: withProps(PlateLeaf, { as: 's' }),\n          [SubscriptPlugin.key]: withProps(PlateLeaf, { as: 'sub' }),\n          [SuperscriptPlugin.key]: withProps(PlateLeaf, { as: 'sup' }),\n          [TableCellHeaderPlugin.key]: TableCellHeaderElement,\n          [TableCellPlugin.key]: TableCellElement,\n          [TablePlugin.key]: TableElement,\n          [TableRowPlugin.key]: TableRowElement,\n          [UnderlinePlugin.key]: withProps(PlateLeaf, { as: 'u' }),\n        },\n      },\n      plugins: [\n        ...basicNodesPlugins,\n        HorizontalRulePlugin,\n        linkPlugin,\n        tablePlugin,\n        ...mediaPlugins,\n        InlineEquationPlugin,\n        HighlightPlugin,\n        KbdPlugin,\n        ImagePlugin,\n        ...indentListPlugins,\n        autoformatPlugin,\n        markdownPlugin,\n      ],\n      value: (editor) =>\n        deserializeMd(editor, initialMarkdown, {\n          processor(processor) {\n            return processor.use(remarkEmoji) as any;\n          },\n        }),\n    },\n    []\n  );\n\n  useResetEditorOnChange({ editor, value: value }, [value]);\n\n  return (\n    <div className=\"grid grid-cols-2 overflow-y-auto\">\n      <Plate\n        onValueChange={() => {\n          setValue(\n            editor.api.markdown.deserialize(\n              markdownEditor.api.markdown.serialize()\n            )\n          );\n        }}\n        editor={markdownEditor}\n      >\n        <EditorContainer>\n          <Editor variant=\"none\" className=\"p-2 font-mono text-sm\" />\n        </EditorContainer>\n      </Plate>\n\n      <Plate editor={editor}>\n        <EditorContainer className=\"bg-muted/50\">\n          <Editor variant=\"none\" className=\"p-2\" />\n        </EditorContainer>\n      </Plate>\n    </div>\n  );\n}\n\nfunction useResetEditorOnChange(\n  { editor, value }: { editor: PlateEditor; value: Value },\n  deps: any[]\n) {\n  React.useEffect(() => {\n    if (value.length > 0) {\n      replaceNodeChildren(editor, {\n        at: [],\n        nodes: cloneDeep(value),\n      });\n\n      editor.history.undos = [];\n      editor.history.redos = [];\n      editor.operations = [];\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps]);\n}\n",
      "path": "example/markdown-to-slate-demo.tsx",
      "target": "components/markdown-to-slate-demo.tsx",
      "type": "registry:example"
    }
  ],
  "name": "markdown-to-slate-demo",
  "registryDependencies": [],
  "type": "registry:example"
}
{
  "dependencies": [
    "@udecode/plate-media"
  ],
  "doc": {
    "description": "Toolbar button for inserting and managing media.",
    "docs": [
      {
        "route": "/docs/media",
        "title": "Media"
      }
    ],
    "examples": [
      "media-demo",
      "upload-pro"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React, { useCallback, useState } from 'react';\n\nimport type { DropdownMenuProps } from '@radix-ui/react-dropdown-menu';\n\nimport { cn } from '@udecode/cn';\nimport { insertNodes, isUrl } from '@udecode/plate-common';\nimport { useEditorRef } from '@udecode/plate-core/react';\nimport {\n  AudioPlugin,\n  FilePlugin,\n  ImagePlugin,\n  VideoPlugin,\n} from '@udecode/plate-media/react';\nimport {\n  AudioLinesIcon,\n  FileUpIcon,\n  FilmIcon,\n  ImageIcon,\n  LinkIcon,\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { useFilePicker } from 'use-file-picker';\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from './alert-dialog';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuTrigger,\n  useOpenState,\n} from './dropdown-menu';\nimport { Input } from './input';\nimport {\n  ToolbarSplitButton,\n  ToolbarSplitButtonPrimary,\n  ToolbarSplitButtonSecondary,\n} from './toolbar';\nconst MEDIA_CONFIG: Record<\n  string,\n  {\n    accept: string[];\n    icon: React.ReactNode;\n    title: string;\n    tooltip: string;\n  }\n> = {\n  [AudioPlugin.key]: {\n    accept: ['audio/*'],\n    icon: <AudioLinesIcon className=\"size-4\" />,\n    title: 'Insert Audio',\n    tooltip: 'Audio',\n  },\n  [FilePlugin.key]: {\n    accept: ['*'],\n    icon: <FileUpIcon className=\"size-4\" />,\n    title: 'Insert File',\n    tooltip: 'File',\n  },\n  [ImagePlugin.key]: {\n    accept: ['image/*'],\n    icon: <ImageIcon className=\"size-4\" />,\n    title: 'Insert Image',\n    tooltip: 'Image',\n  },\n  [VideoPlugin.key]: {\n    accept: ['video/*'],\n    icon: <FilmIcon className=\"size-4\" />,\n    title: 'Insert Video',\n    tooltip: 'Video',\n  },\n};\n\nexport function MediaToolbarButton({\n  children,\n  nodeType,\n  ...props\n}: DropdownMenuProps & { nodeType: string }) {\n  const currentConfig = MEDIA_CONFIG[nodeType];\n\n  const editor = useEditorRef();\n  const openState = useOpenState();\n\n  const { openFilePicker } = useFilePicker({\n    accept: currentConfig.accept,\n    multiple: true,\n    onFilesSelected: ({ plainFiles: updatedFiles }) => {\n      (editor as any).tf.insert.media(updatedFiles);\n    },\n  });\n\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const [url, setUrl] = useState('');\n\n  const embedMedia = useCallback(() => {\n    if (!isUrl(url)) return toast.error('Invalid URL');\n\n    setDialogOpen(false);\n    insertNodes(editor, {\n      children: [{ text: '' }],\n      name: nodeType === FilePlugin.key ? url.split('/').pop() : undefined,\n      type: nodeType,\n      url,\n    });\n  }, [url, editor, nodeType]);\n\n  return (\n    <>\n      <DropdownMenu {...openState} modal={false} {...props}>\n        <ToolbarSplitButton pressed={openState.open}>\n          <ToolbarSplitButtonPrimary\n            onClick={() => openFilePicker()}\n            onMouseDown={(e) => e.preventDefault()}\n            tooltip={currentConfig.tooltip}\n          >\n            {currentConfig.icon}\n          </ToolbarSplitButtonPrimary>\n\n          <DropdownMenuTrigger asChild>\n            <ToolbarSplitButtonSecondary />\n          </DropdownMenuTrigger>\n        </ToolbarSplitButton>\n\n        <DropdownMenuContent\n          className={cn('min-w-0 data-[state=closed]:hidden')}\n          align=\"start\"\n        >\n          <DropdownMenuRadioGroup>\n            <DropdownMenuRadioItem\n              value=\"upload\"\n              onSelect={() => openFilePicker()}\n              hideIcon\n            >\n              <div className=\"flex items-center gap-2\">\n                {currentConfig.icon}\n                <span className=\"text-sm\">Upload from computer</span>\n              </div>\n            </DropdownMenuRadioItem>\n            <DropdownMenuRadioItem\n              value=\"url\"\n              onSelect={() => setDialogOpen(true)}\n              hideIcon\n            >\n              <div className=\"flex items-center gap-2\">\n                <LinkIcon />\n                <span className=\"text-sm\">Insert via URL</span>\n              </div>\n            </DropdownMenuRadioItem>\n          </DropdownMenuRadioGroup>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      <AlertDialog\n        open={dialogOpen}\n        onOpenChange={(value) => {\n          setDialogOpen(value);\n          setUrl('');\n        }}\n      >\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>{currentConfig.title}</AlertDialogTitle>\n            <AlertDialogDescription className=\"group relative flex w-full items-center gap-2\">\n              <label\n                className=\"absolute top-1/2 block -translate-y-1/2 cursor-text px-1 text-sm text-muted-foreground/70 transition-all group-focus-within:pointer-events-none group-focus-within:top-0 group-focus-within:cursor-default group-focus-within:text-xs group-focus-within:font-medium group-focus-within:text-foreground has-[+input:not(:placeholder-shown)]:pointer-events-none has-[+input:not(:placeholder-shown)]:top-0 has-[+input:not(:placeholder-shown)]:cursor-default has-[+input:not(:placeholder-shown)]:text-xs has-[+input:not(:placeholder-shown)]:font-medium has-[+input:not(:placeholder-shown)]:text-foreground\"\n                htmlFor=\"input-32\"\n              >\n                <span className=\"inline-flex bg-background px-2\">URL</span>\n              </label>\n              <Input\n                id=\"input-32\"\n                value={url}\n                onChange={(e) => setUrl(e.target.value)}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter') embedMedia();\n                }}\n                placeholder=\"\"\n                type=\"email\"\n                autoFocus\n              />\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={(e) => {\n                e.preventDefault();\n                embedMedia();\n              }}\n            >\n              Accept\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n",
      "path": "plate-ui/media-toolbar-button.tsx",
      "target": "components/plate-ui/media-toolbar-button.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "media-toolbar-button",
  "registryDependencies": [
    "toolbar"
  ],
  "type": "registry:ui"
}
{
  "dependencies": [
    "@udecode/plate-block-quote",
    "@udecode/plate-code-block",
    "@udecode/plate-comments",
    "@udecode/plate-excalidraw",
    "@udecode/plate-heading",
    "@udecode/plate-horizontal-rule",
    "@udecode/plate-link",
    "@udecode/plate-media",
    "@udecode/plate-mention",
    "@udecode/plate-table",
    "@udecode/plate-toggle"
  ],
  "files": [
    {
      "content": "'use client';\n\nimport type React from 'react';\n\nimport type { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport type {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n} from '@udecode/plate-code-block/react';\nimport type { TCommentText } from '@udecode/plate-comments';\nimport type { TElement, TText } from '@udecode/plate-common';\nimport type { ParagraphPlugin } from '@udecode/plate-common/react';\nimport type { TExcalidrawElement } from '@udecode/plate-excalidraw';\nimport type { ExcalidrawPlugin } from '@udecode/plate-excalidraw/react';\nimport type { HEADING_KEYS } from '@udecode/plate-heading';\nimport type { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport type { TLinkElement } from '@udecode/plate-link';\nimport type { LinkPlugin } from '@udecode/plate-link/react';\nimport type { TImageElement, TMediaEmbedElement } from '@udecode/plate-media';\nimport type { ImagePlugin, MediaEmbedPlugin } from '@udecode/plate-media/react';\nimport type {\n  TMentionElement,\n  TMentionInputElement,\n} from '@udecode/plate-mention';\nimport type {\n  MentionInputPlugin,\n  MentionPlugin,\n} from '@udecode/plate-mention/react';\nimport type { TTableElement } from '@udecode/plate-table';\nimport type {\n  TableCellPlugin,\n  TablePlugin,\n  TableRowPlugin,\n} from '@udecode/plate-table/react';\nimport type { TToggleElement } from '@udecode/plate-toggle';\nimport type { TogglePlugin } from '@udecode/plate-toggle/react';\n\n/** Text */\n\nexport type EmptyText = {\n  text: '';\n};\n\nexport type PlainText = {\n  text: string;\n};\n\nexport interface RichText extends TText, TCommentText {\n  backgroundColor?: React.CSSProperties['backgroundColor'];\n  bold?: boolean;\n  code?: boolean;\n  color?: React.CSSProperties['color'];\n  fontFamily?: React.CSSProperties['fontFamily'];\n  fontSize?: React.CSSProperties['fontSize'];\n  fontWeight?: React.CSSProperties['fontWeight'];\n  italic?: boolean;\n  kbd?: boolean;\n  strikethrough?: boolean;\n  subscript?: boolean;\n  underline?: boolean;\n}\n\n/** Inline Elements */\n\nexport interface MyLinkElement extends TLinkElement {\n  children: RichText[];\n  type: typeof LinkPlugin.key;\n}\n\nexport interface MyMentionInputElement extends TMentionInputElement {\n  children: [PlainText];\n  type: typeof MentionInputPlugin.key;\n}\n\nexport interface MyMentionElement extends TMentionElement {\n  children: [EmptyText];\n  type: typeof MentionPlugin.key;\n}\n\nexport type MyInlineElement =\n  | MyLinkElement\n  | MyMentionElement\n  | MyMentionInputElement;\n\nexport type MyInlineDescendant = MyInlineElement | RichText;\n\nexport type MyInlineChildren = MyInlineDescendant[];\n\n/** Block props */\n\nexport interface MyIndentProps {\n  indent?: number;\n}\n\nexport interface MyIndentListProps extends MyIndentProps {\n  listRestart?: number;\n  listStart?: number;\n  listStyleType?: string;\n}\n\nexport interface MyLineHeightProps {\n  lineHeight?: React.CSSProperties['lineHeight'];\n}\n\nexport interface MyAlignProps {\n  align?: React.CSSProperties['textAlign'];\n}\n\nexport interface MyBlockElement\n  extends TElement,\n    MyIndentListProps,\n    MyLineHeightProps {\n  id?: string;\n}\n\n/** Blocks */\n\nexport interface MyParagraphElement extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof ParagraphPlugin.key;\n}\n\nexport interface MyH1Element extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof HEADING_KEYS.h1;\n}\n\nexport interface MyH2Element extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof HEADING_KEYS.h2;\n}\n\nexport interface MyH3Element extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof HEADING_KEYS.h3;\n}\n\nexport interface MyBlockquoteElement extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof BlockquotePlugin.key;\n}\n\nexport interface MyCodeBlockElement extends MyBlockElement {\n  children: MyCodeLineElement[];\n  type: typeof CodeBlockPlugin.key;\n}\n\nexport interface MyCodeLineElement extends TElement {\n  children: PlainText[];\n  type: typeof CodeLinePlugin.key;\n}\n\nexport interface MyTableElement extends TTableElement, MyBlockElement {\n  children: MyTableRowElement[];\n  type: typeof TablePlugin.key;\n}\n\nexport interface MyTableRowElement extends TElement {\n  children: MyTableCellElement[];\n  type: typeof TableRowPlugin.key;\n}\n\nexport interface MyTableCellElement extends TElement {\n  children: MyNestableBlock[];\n  type: typeof TableCellPlugin.key;\n}\n\nexport interface MyToggleElement extends TToggleElement, MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof TogglePlugin.key;\n}\n\nexport interface MyImageElement extends TImageElement, MyBlockElement {\n  children: [EmptyText];\n  type: typeof ImagePlugin.key;\n}\n\nexport interface MyMediaEmbedElement\n  extends TMediaEmbedElement,\n    MyBlockElement {\n  children: [EmptyText];\n  type: typeof MediaEmbedPlugin.key;\n}\n\nexport interface MyHrElement extends MyBlockElement {\n  children: [EmptyText];\n  type: typeof HorizontalRulePlugin.key;\n}\n\nexport interface MyExcalidrawElement\n  extends TExcalidrawElement,\n    MyBlockElement {\n  children: [EmptyText];\n  type: typeof ExcalidrawPlugin.key;\n}\n\nexport type MyNestableBlock = MyParagraphElement;\n\nexport type MyRootBlock =\n  | MyBlockquoteElement\n  | MyCodeBlockElement\n  | MyExcalidrawElement\n  | MyH1Element\n  | MyH2Element\n  | MyH3Element\n  | MyHrElement\n  | MyImageElement\n  | MyMediaEmbedElement\n  | MyParagraphElement\n  | MyTableElement\n  | MyToggleElement;\n\nexport type MyValue = MyRootBlock[];\n\n// export type MyElement = ElementOf<MyEditor>;\n\n// export type MyBlock = Exclude<MyElement, MyInlineElement>;\n\n// export type MyEditor = ReturnType<typeof useCreateEditor>;\n\n// export const useEditor = () => useEditorRef<MyEditor>();\n",
      "path": "components/editor/plate-types.ts",
      "target": "components/editor/plate-types.ts",
      "type": "registry:component"
    }
  ],
  "name": "plate-types",
  "type": "registry:component"
}
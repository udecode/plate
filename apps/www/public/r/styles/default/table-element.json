{
  "dependencies": [
    "@udecode/plate-table",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-popover"
  ],
  "doc": {
    "description": "A table component with floating toolbar and border customization.",
    "docs": [
      {
        "route": "/docs/table"
      },
      {
        "route": "https://pro.platejs.org/docs/components/table-element"
      }
    ],
    "examples": [
      "table-demo"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport type * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\nimport type { TTableElement } from '@udecode/plate-table';\n\nimport { PopoverAnchor } from '@radix-ui/react-popover';\nimport { cn, withRef } from '@udecode/cn';\nimport { isSelectionExpanded } from '@udecode/plate-common';\nimport {\n  useEditorRef,\n  useEditorSelector,\n  useElement,\n  useRemoveNodeButton,\n  withHOC,\n} from '@udecode/plate-common/react';\nimport {\n  TableProvider,\n  mergeTableCells,\n  unmergeTableCells,\n  useTableBordersDropdownMenuContentState,\n  useTableElement,\n  useTableElementState,\n  useTableMergeState,\n} from '@udecode/plate-table/react';\nimport { type LucideProps, Combine, Trash2Icon, Ungroup } from 'lucide-react';\nimport { useReadOnly, useSelected } from 'slate-react';\n\nimport { Button } from './button';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n} from './dropdown-menu';\nimport { PlateElement } from './plate-element';\nimport { Popover, PopoverContent, popoverVariants } from './popover';\n\nexport const TableBordersDropdownMenuContent = withRef<\n  typeof DropdownMenuPrimitive.Content\n>((props, ref) => {\n  const {\n    getOnSelectTableBorder,\n    hasBottomBorder,\n    hasLeftBorder,\n    hasNoBorders,\n    hasOuterBorders,\n    hasRightBorder,\n    hasTopBorder,\n  } = useTableBordersDropdownMenuContentState();\n\n  return (\n    <DropdownMenuContent\n      ref={ref}\n      className={cn('min-w-[220px]')}\n      align=\"start\"\n      side=\"right\"\n      sideOffset={0}\n      {...props}\n    >\n      <DropdownMenuGroup>\n        <DropdownMenuCheckboxItem\n          checked={hasBottomBorder}\n          onCheckedChange={getOnSelectTableBorder('bottom')}\n        >\n          <BorderBottom />\n          <div>Bottom Border</div>\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={hasTopBorder}\n          onCheckedChange={getOnSelectTableBorder('top')}\n        >\n          <BorderTop />\n          <div>Top Border</div>\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={hasLeftBorder}\n          onCheckedChange={getOnSelectTableBorder('left')}\n        >\n          <BorderLeft />\n          <div>Left Border</div>\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={hasRightBorder}\n          onCheckedChange={getOnSelectTableBorder('right')}\n        >\n          <BorderRight />\n          <div>Right Border</div>\n        </DropdownMenuCheckboxItem>\n      </DropdownMenuGroup>\n\n      <DropdownMenuGroup>\n        <DropdownMenuCheckboxItem\n          checked={hasNoBorders}\n          onCheckedChange={getOnSelectTableBorder('none')}\n        >\n          <BorderNone />\n          <div>No Border</div>\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={hasOuterBorders}\n          onCheckedChange={getOnSelectTableBorder('outer')}\n        >\n          <BorderAll />\n          <div>Outside Borders</div>\n        </DropdownMenuCheckboxItem>\n      </DropdownMenuGroup>\n    </DropdownMenuContent>\n  );\n});\n\nexport const TableFloatingToolbar = withRef<typeof PopoverContent>(\n  ({ children, ...props }, ref) => {\n    const element = useElement<TTableElement>();\n    const { props: buttonProps } = useRemoveNodeButton({ element });\n\n    const selectionCollapsed = useEditorSelector(\n      (editor) => !isSelectionExpanded(editor),\n      []\n    );\n\n    const readOnly = useReadOnly();\n    const selected = useSelected();\n    const editor = useEditorRef();\n\n    const collapsed = !readOnly && selected && selectionCollapsed;\n    const open = !readOnly && selected;\n\n    const { canMerge, canUnmerge } = useTableMergeState();\n\n    const mergeContent = canMerge && (\n      <Button\n        variant=\"ghost\"\n        onClick={() => mergeTableCells(editor)}\n        contentEditable={false}\n        isMenu\n      >\n        <Combine />\n        Merge\n      </Button>\n    );\n\n    const unmergeButton = canUnmerge && (\n      <Button\n        variant=\"ghost\"\n        onClick={() => unmergeTableCells(editor)}\n        contentEditable={false}\n        isMenu\n      >\n        <Ungroup />\n        Unmerge\n      </Button>\n    );\n\n    const bordersContent = collapsed && (\n      <>\n        <DropdownMenu modal={false}>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" isMenu>\n              <BorderAll />\n              Borders\n            </Button>\n          </DropdownMenuTrigger>\n\n          <DropdownMenuPortal>\n            <TableBordersDropdownMenuContent />\n          </DropdownMenuPortal>\n        </DropdownMenu>\n\n        <Button variant=\"ghost\" contentEditable={false} isMenu {...buttonProps}>\n          <Trash2Icon />\n          Delete\n        </Button>\n      </>\n    );\n\n    return (\n      <Popover open={open} modal={false}>\n        <PopoverAnchor asChild>{children}</PopoverAnchor>\n        {(canMerge || canUnmerge || collapsed) && (\n          <PopoverContent\n            ref={ref}\n            className={cn(popoverVariants(), 'flex w-[220px] flex-col p-1')}\n            onOpenAutoFocus={(e) => e.preventDefault()}\n            {...props}\n          >\n            {unmergeButton}\n            {mergeContent}\n            {bordersContent}\n          </PopoverContent>\n        )}\n      </Popover>\n    );\n  }\n);\n\nexport const TableElement = withHOC(\n  TableProvider,\n  withRef<typeof PlateElement>(({ children, className, ...props }, ref) => {\n    const { colSizes, isSelectingCell, marginLeft, minColumnWidth } =\n      useTableElementState();\n    const { colGroupProps, props: tableProps } = useTableElement();\n\n    return (\n      <TableFloatingToolbar>\n        <div className=\"overflow-x-auto\" style={{ paddingLeft: marginLeft }}>\n          <PlateElement\n            ref={ref}\n            as=\"table\"\n            className={cn(\n              'my-4 ml-px mr-0 table h-px w-full table-fixed border-collapse',\n              isSelectingCell && '[&_*::selection]:bg-none',\n              className\n            )}\n            {...tableProps}\n            {...props}\n          >\n            <colgroup {...colGroupProps}>\n              {colSizes.map((width, index) => (\n                <col\n                  key={index}\n                  style={{\n                    minWidth: minColumnWidth,\n                    width: width || undefined,\n                  }}\n                />\n              ))}\n            </colgroup>\n\n            <tbody className=\"min-w-full\">{children}</tbody>\n          </PlateElement>\n        </div>\n      </TableFloatingToolbar>\n    );\n  })\n);\n\nconst BorderAll = (props: LucideProps) => (\n  <svg\n    fill=\"currentColor\"\n    focusable=\"false\"\n    height=\"48\"\n    role=\"img\"\n    viewBox=\"0 0 24 24\"\n    width=\"48\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path d=\"M3 6a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v12a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3V6zm10 13h5a1 1 0 0 0 1-1v-5h-6v6zm-2-6H5v5a1 1 0 0 0 1 1h5v-6zm2-2h6V6a1 1 0 0 0-1-1h-5v6zm-2-6H6a1 1 0 0 0-1 1v5h6V5z\" />\n  </svg>\n);\n\nconst BorderBottom = (props: LucideProps) => (\n  <svg\n    fill=\"currentColor\"\n    focusable=\"false\"\n    height=\"48\"\n    role=\"img\"\n    viewBox=\"0 0 24 24\"\n    width=\"48\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path d=\"M13 5a1 1 0 1 0 0-2h-2a1 1 0 1 0 0 2h2zm-8 6a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2zm-2 7a1 1 0 1 1 2 0 1 1 0 0 0 1 1h12a1 1 0 0 0 1-1 1 1 0 1 1 2 0 3 3 0 0 1-3 3H6a3 3 0 0 1-3-3zm17-8a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-2a1 1 0 0 0-1-1zM7 4a1 1 0 0 0-1-1 3 3 0 0 0-3 3 1 1 0 0 0 2 0 1 1 0 0 1 1-1 1 1 0 0 0 1-1zm11-1a1 1 0 1 0 0 2 1 1 0 0 1 1 1 1 1 0 1 0 2 0 3 3 0 0 0-3-3z\" />\n  </svg>\n);\n\nconst BorderLeft = (props: LucideProps) => (\n  <svg\n    fill=\"currentColor\"\n    focusable=\"false\"\n    height=\"48\"\n    role=\"img\"\n    viewBox=\"0 0 24 24\"\n    width=\"48\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path d=\"M6 21a1 1 0 1 0 0-2 1 1 0 0 1-1-1V6a1 1 0 0 1 1-1 1 1 0 0 0 0-2 3 3 0 0 0-3 3v12a3 3 0 0 0 3 3zm7-16a1 1 0 1 0 0-2h-2a1 1 0 1 0 0 2h2zm6 6a1 1 0 1 1 2 0v2a1 1 0 1 1-2 0v-2zm-5 9a1 1 0 0 1-1 1h-2a1 1 0 1 1 0-2h2a1 1 0 0 1 1 1zm4-17a1 1 0 1 0 0 2 1 1 0 0 1 1 1 1 1 0 1 0 2 0 3 3 0 0 0-3-3zm-1 17a1 1 0 0 0 1 1 3 3 0 0 0 3-3 1 1 0 1 0-2 0 1 1 0 0 1-1 1 1 1 0 0 0-1 1z\" />\n  </svg>\n);\n\nconst BorderNone = (props: LucideProps) => (\n  <svg\n    fill=\"currentColor\"\n    focusable=\"false\"\n    height=\"48\"\n    role=\"img\"\n    viewBox=\"0 0 24 24\"\n    width=\"48\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path d=\"M14 4a1 1 0 0 1-1 1h-2a1 1 0 1 1 0-2h2a1 1 0 0 1 1 1zm-9 7a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2zm14 0a1 1 0 1 1 2 0v2a1 1 0 1 1-2 0v-2zm-6 10a1 1 0 1 0 0-2h-2a1 1 0 1 0 0 2h2zM7 4a1 1 0 0 0-1-1 3 3 0 0 0-3 3 1 1 0 0 0 2 0 1 1 0 0 1 1-1 1 1 0 0 0 1-1zm11-1a1 1 0 1 0 0 2 1 1 0 0 1 1 1 1 1 0 1 0 2 0 3 3 0 0 0-3-3zM7 20a1 1 0 0 1-1 1 3 3 0 0 1-3-3 1 1 0 1 1 2 0 1 1 0 0 0 1 1 1 1 0 0 1 1 1zm11 1a1 1 0 1 1 0-2 1 1 0 0 0 1-1 1 1 0 1 1 2 0 3 3 0 0 1-3 3z\" />\n  </svg>\n);\n\nconst BorderRight = (props: LucideProps) => (\n  <svg\n    fill=\"currentColor\"\n    focusable=\"false\"\n    height=\"48\"\n    role=\"img\"\n    viewBox=\"0 0 24 24\"\n    width=\"48\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path d=\"M13 5a1 1 0 1 0 0-2h-2a1 1 0 1 0 0 2h2zm-8 6a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2zm9 9a1 1 0 0 1-1 1h-2a1 1 0 1 1 0-2h2a1 1 0 0 1 1 1zM6 3a1 1 0 0 1 0 2 1 1 0 0 0-1 1 1 1 0 0 1-2 0 3 3 0 0 1 3-3zm1 17a1 1 0 0 1-1 1 3 3 0 0 1-3-3 1 1 0 1 1 2 0 1 1 0 0 0 1 1 1 1 0 0 1 1 1zm11 1a1 1 0 1 1 0-2 1 1 0 0 0 1-1V6a1 1 0 0 0-1-1 1 1 0 1 1 0-2 3 3 0 0 1 3 3v12a3 3 0 0 1-3 3z\" />\n  </svg>\n);\n\nconst BorderTop = (props: LucideProps) => (\n  <svg\n    fill=\"currentColor\"\n    focusable=\"false\"\n    height=\"48\"\n    role=\"img\"\n    viewBox=\"0 0 24 24\"\n    width=\"48\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path d=\"M3 6a1 1 0 0 0 2 0 1 1 0 0 1 1-1h12a1 1 0 0 1 1 1 1 1 0 1 0 2 0 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3zm2 5a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2zm14 0a1 1 0 1 1 2 0v2a1 1 0 1 1-2 0v-2zm-5 9a1 1 0 0 1-1 1h-2a1 1 0 1 1 0-2h2a1 1 0 0 1 1 1zm-8 1a1 1 0 1 0 0-2 1 1 0 0 1-1-1 1 1 0 1 0-2 0 3 3 0 0 0 3 3zm11-1a1 1 0 0 0 1 1 3 3 0 0 0 3-3 1 1 0 1 0-2 0 1 1 0 0 1-1 1 1 1 0 0 0-1 1z\" />\n  </svg>\n);\n",
      "path": "plate-ui/table-element.tsx",
      "target": "components/plate-ui/table-element.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "table-element",
  "registryDependencies": [
    "dropdown-menu",
    "plate-element"
  ],
  "type": "registry:ui"
}
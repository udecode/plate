{
  "dependencies": [
    "@udecode/plate-date"
  ],
  "doc": {
    "description": "A date field component with calendar picker.",
    "docs": [
      {
        "route": "/docs/date"
      },
      {
        "route": "https://pro.platejs.org/docs/components/date-element"
      }
    ],
    "examples": [
      "date-demo"
    ],
    "label": "New"
  },
  "files": [
    {
      "content": "'use client';\n\nimport { cn, withRef } from '@udecode/cn';\nimport { setNodes } from '@udecode/plate-common';\nimport { findNodePath } from '@udecode/plate-common/react';\n\nimport { Calendar } from './calendar';\nimport { PlateElement } from './plate-element';\nimport { Popover, PopoverContent, PopoverTrigger } from './popover';\n\nexport const DateElement = withRef<typeof PlateElement>(\n  ({ children, className, ...props }, ref) => {\n    const { editor, element } = props;\n\n    return (\n      <PlateElement\n        ref={ref}\n        className={cn('inline-block', className)}\n        contentEditable={false}\n        {...props}\n      >\n        <Popover>\n          <PopoverTrigger asChild>\n            <span\n              className={cn(\n                'w-fit cursor-pointer rounded-sm bg-muted px-1 text-muted-foreground'\n              )}\n              contentEditable={false}\n              draggable\n            >\n              {element.date ? (\n                (() => {\n                  const today = new Date();\n                  const elementDate = new Date(element.date as string);\n                  const isToday =\n                    elementDate.getDate() === today.getDate() &&\n                    elementDate.getMonth() === today.getMonth() &&\n                    elementDate.getFullYear() === today.getFullYear();\n\n                  const isYesterday =\n                    new Date(\n                      today.setDate(today.getDate() - 1)\n                    ).toDateString() === elementDate.toDateString();\n                  const isTomorrow =\n                    new Date(\n                      today.setDate(today.getDate() + 2)\n                    ).toDateString() === elementDate.toDateString();\n\n                  if (isToday) return 'Today';\n                  if (isYesterday) return 'Yesterday';\n                  if (isTomorrow) return 'Tomorrow';\n\n                  return elementDate.toLocaleDateString(undefined, {\n                    day: 'numeric',\n                    month: 'long',\n                    year: 'numeric',\n                  });\n                })()\n              ) : (\n                <span>Pick a date</span>\n              )}\n            </span>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\">\n            <Calendar\n              selected={new Date(element.date as string)}\n              onSelect={(date) => {\n                if (!date) return;\n\n                setNodes(\n                  editor,\n                  { date: date.toDateString() },\n                  { at: findNodePath(editor, element) }\n                );\n              }}\n              mode=\"single\"\n              initialFocus\n            />\n          </PopoverContent>\n        </Popover>\n        {children}\n      </PlateElement>\n    );\n  }\n);\n",
      "path": "plate-ui/date-element.tsx",
      "target": "components/plate-ui/date-element.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "date-element",
  "registryDependencies": [
    "calendar",
    "plate-element"
  ],
  "type": "registry:ui"
}
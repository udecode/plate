{
  "doc": {
    "description": "Block-level context menu with formatting options."
  },
  "files": [
    {
      "content": "'use client';\n\nimport React, { useRef } from 'react';\n\nimport type { ValueId } from '@/config/customizer-plugins';\n\nimport { cn } from '@udecode/cn';\nimport { AutoformatPlugin } from '@udecode/plate-autoformat/react';\nimport { SingleLinePlugin } from '@udecode/plate-break/react';\nimport { CommentsPlugin } from '@udecode/plate-comments/react';\nimport { Plate, usePlateEditor } from '@udecode/plate-common/react';\nimport { ExcalidrawPlugin } from '@udecode/plate-excalidraw/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { ListPlugin, TodoListPlugin } from '@udecode/plate-list/react';\nimport { NormalizeTypesPlugin } from '@udecode/plate-normalizers';\nimport { PlaywrightPlugin } from '@udecode/plate-playwright';\nimport { TablePlugin } from '@udecode/plate-table/react';\n\nimport { CheckPlugin } from '@/components/context/check-plugin';\nimport { settingsStore } from '@/components/context/settings-store';\nimport { getAutoformatOptions } from '@/lib/plate/demo/plugins/autoformatOptions';\nimport { createPlateUI } from '@/plate/create-plate-ui';\nimport { editableProps } from '@/plate/demo/editableProps';\nimport { isEnabled } from '@/plate/demo/is-enabled';\nimport { DragOverCursorPlugin } from '@/plate/demo/plugins/DragOverCursorPlugin';\nimport { usePlaygroundValue } from '@/plate/demo/values/usePlaygroundValue';\nimport { editorPlugins } from '@/components/editor/plugins/editor-plugins';\nimport { CommentsPopover } from '@/components/plate-ui/comments-popover';\nimport { CursorOverlay } from '@/components/plate-ui/cursor-overlay';\nimport { Editor, EditorContainer } from '@/components/plate-ui/editor';\nimport { FixedToolbar } from '@/components/plate-ui/fixed-toolbar';\nimport { FixedToolbarButtons } from '@/components/plate-ui/fixed-toolbar-buttons';\nimport { FixedToolbarButtonsList } from '@/components/plate-ui/fixed-toolbar-buttons-list';\nimport { FloatingToolbar } from '@/components/plate-ui/floating-toolbar';\nimport { FloatingToolbarButtons } from '@/components/plate-ui/floating-toolbar-buttons';\n\nimport { usePlaygroundEnabled } from './usePlaygroundEnabled';\n\nexport const usePlaygroundEditor = (id: any = '') => {\n  const enabledPlugins = settingsStore.use.checkedPlugins();\n  const overridePlugins = usePlaygroundEnabled(id);\n  const autoformatOptions = getAutoformatOptions(id, enabledPlugins);\n\n  const value = usePlaygroundValue(id);\n  const key = settingsStore.use.version();\n  const editorId = id || 'playground-' + key;\n\n  return usePlateEditor(\n    {\n      id: editorId,\n      override: {\n        components: createPlateUI({\n          draggable: isEnabled('dnd', id),\n          placeholder: isEnabled('placeholder', id),\n        }),\n        plugins: overridePlugins,\n      },\n      plugins: [\n        ...editorPlugins,\n\n        AutoformatPlugin.configure({\n          options: autoformatOptions,\n        }),\n        TablePlugin.configure({\n          options: {\n            enableMerging: id === 'tableMerge',\n          },\n        }),\n        ListPlugin,\n        TodoListPlugin,\n        ExcalidrawPlugin,\n        NormalizeTypesPlugin.configure({\n          options: {\n            rules: [{ path: [0], strictType: HEADING_KEYS.h1 }],\n          },\n        }),\n        SingleLinePlugin,\n\n        // Testing\n        PlaywrightPlugin.configure({\n          enabled: process.env.NODE_ENV !== 'production',\n        }),\n      ],\n      value: value,\n    },\n    []\n  );\n};\n\nexport default function PlaygroundDemo({\n  id,\n  className,\n}: {\n  id?: ValueId;\n  className?: string;\n  scrollSelector?: string;\n}) {\n  const containerRef = useRef(null);\n  const enabled = settingsStore.use.checkedComponents();\n\n  const editor = usePlaygroundEditor(id);\n\n  return (\n    <DemoId id={id}>\n      <Plate editor={editor}>\n        <CheckPlugin componentId=\"fixed-toolbar\">\n          <FixedToolbar className=\"no-scrollbar\">\n            <CheckPlugin componentId=\"fixed-toolbar-buttons\">\n              {id === 'list' ? (\n                <FixedToolbarButtonsList />\n              ) : (\n                <FixedToolbarButtons />\n              )}\n            </CheckPlugin>\n          </FixedToolbar>\n        </CheckPlugin>\n\n        <div id=\"editor-playground\" className=\"flex w-full\">\n          <EditorContainer\n            id=\"scroll_container\"\n            // id={scrollSelector ?? `blockSelection-${id}`}\n            ref={containerRef}\n            variant=\"demo\"\n            className={cn(id && 'max-h-[500px]', className)}\n          >\n            <Editor\n              {...editableProps}\n              variant=\"demo\"\n              className={cn(\n                editableProps.className,\n                // 'overflow-x-auto rounded-none',\n                !id && 'pb-[20vh] pt-4',\n                id && 'pb-8 pt-2'\n              )}\n            />\n\n            <CheckPlugin componentId=\"floating-toolbar\">\n              <FloatingToolbar\n                state={{\n                  // hideToolbar: aiOpen,\n                  showWhenReadOnly: isEnabled(\n                    'comment',\n                    id,\n                    enabled[CommentsPlugin.key]\n                  ),\n                }}\n              >\n                <CheckPlugin componentId=\"floating-toolbar-buttons\">\n                  <FloatingToolbarButtons />\n                </CheckPlugin>\n              </FloatingToolbar>\n            </CheckPlugin>\n\n            <CheckPlugin id=\"cursoroverlay\" plugin={DragOverCursorPlugin}>\n              <CursorOverlay containerRef={containerRef} />\n            </CheckPlugin>\n          </EditorContainer>\n\n          <CheckPlugin\n            id=\"comment\"\n            componentId=\"comments-popover\"\n            plugin={CommentsPlugin}\n          >\n            <CommentsPopover />\n          </CheckPlugin>\n        </div>\n      </Plate>\n    </DemoId>\n  );\n}\n\nconst DemoIdContext = React.createContext<string | undefined>(undefined);\n\nexport function DemoId({\n  id,\n  children,\n}: {\n  children: React.ReactNode;\n  id?: string;\n}) {\n  return <DemoIdContext.Provider value={id}>{children}</DemoIdContext.Provider>;\n}\n\nexport function useDemoId() {\n  return React.useContext(DemoIdContext);\n}\n",
      "path": "example/playground-demo.tsx",
      "target": "components/playground-demo.tsx",
      "type": "registry:example"
    }
  ],
  "name": "block-menu-demo",
  "registryDependencies": [],
  "type": "registry:example"
}
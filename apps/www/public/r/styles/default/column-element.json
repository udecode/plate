{
  "dependencies": [
    "@udecode/plate-layout",
    "@udecode/plate-resizable"
  ],
  "doc": {
    "description": "A resizable column component for layout.",
    "docs": [
      {
        "route": "/docs/column"
      },
      {
        "route": "https://pro.platejs.org/docs/components/column-element"
      }
    ],
    "examples": [
      "column-demo"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport type { TColumnElement } from '@udecode/plate-layout';\n\nimport { cn, withRef } from '@udecode/cn';\nimport { useElement, withHOC } from '@udecode/plate-common/react';\nimport { ResizableProvider } from '@udecode/plate-resizable';\nimport { useReadOnly } from 'slate-react';\n\nimport { PlateElement } from './plate-element';\n\nexport const ColumnElement = withHOC(\n  ResizableProvider,\n  withRef<typeof PlateElement>(({ children, className, ...props }, ref) => {\n    const readOnly = useReadOnly();\n    const { width } = useElement<TColumnElement>();\n\n    return (\n      <PlateElement\n        ref={ref}\n        className={cn(\n          className,\n          !readOnly && 'rounded-lg border border-dashed p-1.5'\n        )}\n        style={{ width: width ?? '100%' }}\n        {...props}\n      >\n        {children}\n      </PlateElement>\n    );\n  })\n);\n",
      "path": "plate-ui/column-element.tsx",
      "target": "components/plate-ui/column-element.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "column-element",
  "registryDependencies": [
    "resizable",
    "plate-element"
  ],
  "type": "registry:ui"
}
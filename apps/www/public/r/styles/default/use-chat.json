{
  "dependencies": [
    "@udecode/plate-ai",
    "ai",
    "@faker-js/faker"
  ],
  "files": [
    {
      "content": "'use client';\n\nimport { type ReactNode, createContext, useContext, useState } from 'react';\n\nimport { faker } from '@faker-js/faker';\nimport { cn } from '@udecode/cn';\nimport { CopilotPlugin } from '@udecode/plate-ai/react';\nimport { useEditorPlugin } from '@udecode/plate-common/react';\nimport { useChat as useBaseChat } from 'ai/react';\nimport {\n  ArrowUpRight,\n  Check,\n  ChevronsUpDown,\n  Eye,\n  EyeOff,\n  Settings,\n} from 'lucide-react';\nimport Link from 'next/link';\n\nimport { Button } from '@/components/plate-ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/plate-ui/command';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/plate-ui/dialog';\nimport { Input } from '@/components/plate-ui/input';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/plate-ui/popover';\n\nexport const useChat = () => {\n  return useBaseChat({\n    id: 'editor',\n    api: '/api/ai/command',\n    body: {\n      apiKey: useOpenAI().apiKey,\n      model: useOpenAI().model.value,\n    },\n    fetch: async (input, init) => {\n      const res = await fetch(input, init);\n\n      if (!res.ok) {\n        // Mock the API response. Remove it when you implement the route /api/ai/command\n        await new Promise((resolve) => setTimeout(resolve, 400));\n\n        const stream = fakeStreamText();\n\n        return new Response(stream, {\n          headers: {\n            Connection: 'keep-alive',\n            'Content-Type': 'text/plain',\n          },\n        });\n      }\n\n      return res;\n    },\n  });\n};\n\n// Used for testing. Remove it after implementing useChat api.\nconst fakeStreamText = ({\n  chunkCount = 10,\n  streamProtocol = 'data',\n}: {\n  chunkCount?: number;\n  streamProtocol?: 'data' | 'text';\n} = {}) => {\n  const chunks = Array.from({ length: chunkCount }, () => ({\n    delay: faker.number.int({ max: 150, min: 50 }),\n    texts: faker.lorem.words({ max: 3, min: 1 }) + ' ',\n  }));\n  const encoder = new TextEncoder();\n\n  return new ReadableStream({\n    async start(controller) {\n      for (const chunk of chunks) {\n        await new Promise((resolve) => setTimeout(resolve, chunk.delay));\n\n        if (streamProtocol === 'text') {\n          controller.enqueue(encoder.encode(chunk.texts));\n        } else {\n          controller.enqueue(\n            encoder.encode(`0:${JSON.stringify(chunk.texts)}\\n`)\n          );\n        }\n      }\n\n      if (streamProtocol === 'data') {\n        controller.enqueue(\n          `d:{\"finishReason\":\"stop\",\"usage\":{\"promptTokens\":0,\"completionTokens\":${chunks.length}}}\\n`\n        );\n      }\n\n      controller.close();\n    },\n  });\n};\n\ninterface Model {\n  label: string;\n  value: string;\n}\n\ninterface OpenAIContextType {\n  apiKey: string;\n  model: Model;\n  setApiKey: (key: string) => void;\n  setModel: (model: Model) => void;\n}\n\nexport const models: Model[] = [\n  { label: 'gpt-4o-mini', value: 'gpt-4o-mini' },\n  { label: 'gpt-4o', value: 'gpt-4o' },\n  { label: 'gpt-4-turbo', value: 'gpt-4-turbo' },\n  { label: 'gpt-4', value: 'gpt-4' },\n  { label: 'gpt-3.5-turbo', value: 'gpt-3.5-turbo' },\n  { label: 'gpt-3.5-turbo-instruct', value: 'gpt-3.5-turbo-instruct' },\n];\n\nconst OpenAIContext = createContext<OpenAIContextType | undefined>(undefined);\n\nexport function OpenAIProvider({ children }: { children: ReactNode }) {\n  const [apiKey, setApiKey] = useState('');\n  const [model, setModel] = useState<Model>(models[0]);\n\n  return (\n    <OpenAIContext.Provider value={{ apiKey, model, setApiKey, setModel }}>\n      {children}\n    </OpenAIContext.Provider>\n  );\n}\n\nexport function useOpenAI() {\n  const context = useContext(OpenAIContext);\n\n  return (\n    context ??\n    ({\n      apiKey: '',\n      model: models[0],\n      setApiKey: () => {},\n      setModel: () => {},\n    } as OpenAIContextType)\n  );\n}\n\nexport function SettingsDialog() {\n  const { apiKey, model, setApiKey, setModel } = useOpenAI();\n  const [tempKey, setTempKey] = useState(apiKey);\n  const [showKey, setShowKey] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [openModel, setOpenModel] = useState(false);\n\n  const { getOptions, setOption } = useEditorPlugin(CopilotPlugin);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setApiKey(tempKey);\n    setOpen(false);\n\n    const completeOptions = getOptions().completeOptions ?? {};\n\n    setOption('completeOptions', {\n      ...completeOptions,\n      body: {\n        ...completeOptions.body,\n        apiKey: tempKey,\n        model: model.value,\n      },\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button\n          size=\"icon\"\n          variant=\"default\"\n          className={cn(\n            'group fixed bottom-4 right-4 z-50 size-10 overflow-hidden',\n            'rounded-full shadow-md hover:shadow-lg',\n            'transition-all duration-300 ease-in-out hover:w-[106px]'\n          )}\n          data-block-hide\n        >\n          <div className=\"flex size-full items-center justify-start gap-2\">\n            <Settings className=\"ml-1.5 size-4\" />\n            <span\n              className={cn(\n                'whitespace-nowrap opacity-0 transition-all duration-300 ease-in-out',\n                'group-hover:translate-x-0 group-hover:opacity-100',\n                '-translate-x-2'\n              )}\n            >\n              Settings\n            </span>\n          </div>\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader className=\"space-y-4\">\n          <DialogTitle>AI Settings</DialogTitle>\n          <DialogDescription>\n            Enter your{' '}\n            <Link\n              className=\"inline-flex items-center font-medium text-primary hover:underline\"\n              href=\"https://platform.openai.com/api-keys\"\n              rel=\"noreferrer\"\n              target=\"_blank\"\n            >\n              OpenAI API key\n              <ArrowUpRight className=\"size-[14px]\" />\n            </Link>{' '}\n            to use AI features.\n          </DialogDescription>\n        </DialogHeader>\n        <form className=\"space-y-4\" onSubmit={handleSubmit}>\n          <div className=\"relative\">\n            <Input\n              className=\"pr-10\"\n              value={tempKey}\n              onChange={(e) => setTempKey(e.target.value)}\n              placeholder=\"sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n              data-1p-ignore\n              type={showKey ? 'text' : 'password'}\n            />\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"absolute right-0 top-0 h-full\"\n              onClick={() => setShowKey(!showKey)}\n              type=\"button\"\n            >\n              {showKey ? (\n                <EyeOff className=\"size-4\" />\n              ) : (\n                <Eye className=\"size-4\" />\n              )}\n              <span className=\"sr-only\">\n                {showKey ? 'Hide' : 'Show'} API key\n              </span>\n            </Button>\n          </div>\n\n          <Popover open={openModel} onOpenChange={setOpenModel}>\n            <PopoverTrigger asChild>\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                className=\"w-full justify-between\"\n                aria-expanded={openModel}\n                role=\"combobox\"\n              >\n                <code>{model.label}</code>\n                <ChevronsUpDown className=\"ml-2 size-4 shrink-0 opacity-50\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-full p-0\">\n              <Command>\n                <CommandInput placeholder=\"Search model...\" />\n                <CommandEmpty>No model found.</CommandEmpty>\n\n                <CommandList>\n                  <CommandGroup>\n                    {models.map((m) => (\n                      <CommandItem\n                        key={m.value}\n                        value={m.value}\n                        onSelect={() => {\n                          setModel(m);\n                          setOpenModel(false);\n                        }}\n                      >\n                        <Check\n                          className={cn(\n                            'mr-2 size-4',\n                            model.value === m.value\n                              ? 'opacity-100'\n                              : 'opacity-0'\n                          )}\n                        />\n                        <code>{m.label}</code>\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n\n          <Button size=\"lg\" className=\"w-full\" type=\"submit\">\n            Save\n          </Button>\n        </form>\n        <p className=\"mt-4 text-sm text-muted-foreground\">\n          Not stored anywhere. Used only for current session requests.\n        </p>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "path": "components/editor/use-chat.tsx",
      "target": "components/editor/use-chat.tsx",
      "type": "registry:component"
    }
  ],
  "name": "use-chat",
  "registryDependencies": [
    "button",
    "dialog",
    "input",
    "command",
    "popover"
  ],
  "type": "registry:component"
}
{
  "dependencies": [
    "@udecode/plate-ai",
    "@udecode/plate-basic-marks",
    "@udecode/plate-block-quote",
    "@udecode/plate-code-block",
    "@udecode/plate-heading",
    "@udecode/plate-horizontal-rule",
    "@udecode/plate-link",
    "@udecode/plate-markdown",
    "@udecode/plate-selection"
  ],
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { withProps } from '@udecode/cn';\nimport { AIChatPlugin, AIPlugin } from '@udecode/plate-ai/react';\nimport {\n  BoldPlugin,\n  CodePlugin,\n  ItalicPlugin,\n  StrikethroughPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n  CodeSyntaxPlugin,\n} from '@udecode/plate-code-block/react';\nimport {\n  ParagraphPlugin,\n  PlateLeaf,\n  createPlateEditor,\n} from '@udecode/plate-common/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport { LinkPlugin } from '@udecode/plate-link/react';\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\nimport { BlockSelectionPlugin } from '@udecode/plate-selection/react';\n\nimport { AIMenu } from '@/components/plate-ui/ai-menu';\nimport { BlockquoteElement } from '@/components/plate-ui/blockquote-element';\nimport { CodeBlockElement } from '@/components/plate-ui/code-block-element';\nimport { CodeLeaf } from '@/components/plate-ui/code-leaf';\nimport { CodeLineElement } from '@/components/plate-ui/code-line-element';\nimport { CodeSyntaxLeaf } from '@/components/plate-ui/code-syntax-leaf';\nimport { SelectionOverlayPlugin } from '@/components/plate-ui/cursor-overlay';\nimport { HeadingElement } from '@/components/plate-ui/heading-element';\nimport { HrElement } from '@/components/plate-ui/hr-element';\nimport { LinkElement } from '@/components/plate-ui/link-element';\nimport { ParagraphElement } from '@/components/plate-ui/paragraph-element';\n\nimport { basicNodesPlugins } from './basic-nodes-plugins';\nimport { indentListPlugins } from './indent-list-plugins';\nimport { linkPlugin } from './link-plugin';\n\nconst createAIEditor = () => {\n  const editor = createPlateEditor({\n    id: 'ai',\n    override: {\n      components: {\n        [BlockquotePlugin.key]: BlockquoteElement,\n        [BoldPlugin.key]: withProps(PlateLeaf, { as: 'strong' }),\n        [CodeBlockPlugin.key]: CodeBlockElement,\n        [CodeLinePlugin.key]: CodeLineElement,\n        [CodePlugin.key]: CodeLeaf,\n        [CodeSyntaxPlugin.key]: CodeSyntaxLeaf,\n        [HEADING_KEYS.h1]: withProps(HeadingElement, { variant: 'h1' }),\n        [HEADING_KEYS.h2]: withProps(HeadingElement, { variant: 'h2' }),\n        [HEADING_KEYS.h3]: withProps(HeadingElement, { variant: 'h3' }),\n        [HorizontalRulePlugin.key]: HrElement,\n        [ItalicPlugin.key]: withProps(PlateLeaf, { as: 'em' }),\n        [LinkPlugin.key]: LinkElement,\n        [ParagraphPlugin.key]: ParagraphElement,\n        [StrikethroughPlugin.key]: withProps(PlateLeaf, { as: 's' }),\n        [UnderlinePlugin.key]: withProps(PlateLeaf, { as: 'u' }),\n      },\n    },\n    plugins: [\n      ParagraphPlugin,\n      ...basicNodesPlugins,\n      HorizontalRulePlugin,\n      linkPlugin,\n      ...indentListPlugins,\n      MarkdownPlugin.configure({ options: { indentList: true } }),\n      // FIXME\n      BlockSelectionPlugin.configure({\n        api: {},\n        extendEditor: null,\n        options: {},\n        render: {},\n        useHooks: null,\n        handlers: {},\n      }),\n    ],\n    value: [{ children: [{ text: '' }], type: 'p' }],\n  });\n\n  return editor;\n};\n\nconst systemCommon = `\\\nYou are an advanced AI-powered note-taking assistant, designed to enhance productivity and creativity in note management.\nRespond directly to user prompts with clear, concise, and relevant content. Maintain a neutral, helpful tone.\n\nRules:\n- <Document> is the entire note the user is working on.\n- <Reminder> is a reminder of how you should reply to INSTRUCTIONS. It does not apply to questions.\n- Anything else is the user prompt.\n- Your response should be tailored to the user's prompt, providing precise assistance to optimize note management.\n- For INSTRUCTIONS: Follow the <Reminder> exactly. Provide ONLY the content to be inserted or replaced. No explanations or comments.\n- For QUESTIONS: Provide a helpful and concise answer. You may include brief explanations if necessary.\n- CRITICAL: Distinguish between INSTRUCTIONS and QUESTIONS. Instructions typically ask you to modify or add content. Questions ask for information or clarification.\n`;\n\nconst systemDefault = `\\\n${systemCommon}\n- <Block> is the current block of text the user is working on.\n- Ensure your output can seamlessly fit into the existing <Block> structure.\n- CRITICAL: Provide only a single block of text. DO NOT create multiple paragraphs or separate blocks.\n<Block>\n{block}\n</Block>\n`;\n\nconst systemSelecting = `\\\n${systemCommon}\n- <Block> is the block of text containing the user's selection, providing context.\n- Ensure your output can seamlessly fit into the existing <Block> structure.\n- <Selection> is the specific text the user has selected in the block and wants to modify or ask about.\n- Consider the context provided by <Block>, but only modify <Selection>. Your response should be a direct replacement for <Selection>.\n<Block>\n{block}\n</Block>\n<Selection>\n{selection}\n</Selection>\n`;\n\nconst systemBlockSelecting = `\\\n${systemCommon}\n- <Selection> represents the full blocks of text the user has selected and wants to modify or ask about.\n- Your response should be a direct replacement for the entire <Selection>.\n- Maintain the overall structure and formatting of the selected blocks, unless explicitly instructed otherwise.\n- CRITICAL: Provide only the content to replace <Selection>. Do not add additional blocks or change the block structure unless specifically requested.\n<Selection>\n{block}\n</Selection>\n`;\n\nconst userDefault = `<Reminder>\nCRITICAL: DO NOT use block formatting. You can only use inline formatting.\nCRITICAL: DO NOT start new lines or paragraphs.\nNEVER write <Block>.\n</Reminder>\n{prompt}`;\n\nconst userSelecting = `<Reminder>\nIf this is a question, provide a helpful and concise answer about <Selection>.\nIf this is an instruction, provide ONLY the text to replace <Selection>. No explanations.\nEnsure it fits seamlessly within <Block>. If <Block> is empty, write ONE random sentence.\nNEVER write <Block> or <Selection>.\n</Reminder>\n{prompt} about <Selection>`;\n\nconst userBlockSelecting = `<Reminder>\nIf this is a question, provide a helpful and concise answer about <Selection>.\nIf this is an instruction, provide ONLY the content to replace the entire <Selection>. No explanations.\nMaintain the overall structure unless instructed otherwise.\nNEVER write <Block> or <Selection>.\n</Reminder>\n{prompt} about <Selection>`;\n\nexport const PROMPT_TEMPLATES = {\n  systemBlockSelecting,\n  systemDefault,\n  systemSelecting,\n  userBlockSelecting,\n  userDefault,\n  userSelecting,\n};\n\nexport const aiPlugins = [\n  SelectionOverlayPlugin,\n  MarkdownPlugin.configure({ options: { indentList: true } }),\n  AIPlugin,\n  AIChatPlugin.configure({\n    options: {\n      createAIEditor,\n      promptTemplate: ({ isBlockSelecting, isSelecting }) => {\n        return isBlockSelecting\n          ? PROMPT_TEMPLATES.userBlockSelecting\n          : isSelecting\n            ? PROMPT_TEMPLATES.userSelecting\n            : PROMPT_TEMPLATES.userDefault;\n      },\n      scrollContainerSelector: '#scroll_container',\n      systemTemplate: ({ isBlockSelecting, isSelecting }) => {\n        return isBlockSelecting\n          ? PROMPT_TEMPLATES.systemBlockSelecting\n          : isSelecting\n            ? PROMPT_TEMPLATES.systemSelecting\n            : PROMPT_TEMPLATES.systemDefault;\n      },\n    },\n    render: { afterEditable: () => <AIMenu /> },\n  }),\n] as const;\n",
      "path": "components/editor/plugins/ai-plugins.tsx",
      "target": "components/editor/plugins/ai-plugins.tsx",
      "type": "registry:component"
    }
  ],
  "name": "ai-plugins",
  "registryDependencies": [
    "basic-nodes-plugins",
    "indent-list-plugins",
    "link-plugin",
    "ai-menu",
    "blockquote-element",
    "code-block-element",
    "code-leaf",
    "code-line-element",
    "code-syntax-leaf",
    "cursor-overlay",
    "heading-element",
    "hr-element",
    "link-element",
    "paragraph-element"
  ],
  "type": "registry:component"
}
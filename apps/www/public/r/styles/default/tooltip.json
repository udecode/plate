{
  "dependencies": [
    "@radix-ui/react-tooltip"
  ],
  "doc": {
    "description": "A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.",
    "links": {
      "doc": "https://ui.shadcn.com/docs/components/tooltip"
    }
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { withCn, withProps } from '@udecode/cn';\n\nexport const TooltipProvider = withProps(TooltipPrimitive.Provider, {\n  delayDuration: 0,\n  disableHoverableContent: true,\n  skipDelayDuration: 0,\n});\n\nexport const Tooltip = TooltipPrimitive.Root;\n\nexport const TooltipTrigger = TooltipPrimitive.Trigger;\n\nexport const TooltipPortal = TooltipPrimitive.Portal;\n\nexport const TooltipContent = withCn(\n  withProps(TooltipPrimitive.Content, {\n    sideOffset: 4,\n  }),\n  'z-50 overflow-hidden rounded-md bg-black px-3 py-1.5 text-sm font-semibold text-white shadow-md'\n);\n\nexport function withTooltip<\n  T extends React.ComponentType<any> | keyof HTMLElementTagNameMap,\n>(Component: T) {\n  return React.forwardRef<\n    React.ElementRef<T>,\n    {\n      tooltipContentProps?: Omit<\n        React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>,\n        'children'\n      >;\n      tooltipProps?: Omit<\n        React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Root>,\n        'children'\n      >;\n      tooltip?: React.ReactNode;\n    } & React.ComponentPropsWithoutRef<T> &\n      Omit<TooltipPrimitive.TooltipProviderProps, 'children'>\n  >(function ExtendComponent(\n    {\n      delayDuration = 0,\n      disableHoverableContent = true,\n      skipDelayDuration = 0,\n      tooltip,\n      tooltipContentProps,\n      tooltipProps,\n      ...props\n    },\n    ref\n  ) {\n    const [mounted, setMounted] = React.useState(false);\n\n    React.useEffect(() => {\n      setMounted(true);\n    }, []);\n\n    const component = <Component ref={ref} {...(props as any)} />;\n\n    if (tooltip && mounted) {\n      return (\n        <TooltipProvider\n          delayDuration={delayDuration}\n          disableHoverableContent={disableHoverableContent}\n          skipDelayDuration={skipDelayDuration}\n        >\n          <Tooltip {...tooltipProps}>\n            <TooltipTrigger asChild>{component}</TooltipTrigger>\n\n            <TooltipPortal>\n              <TooltipContent {...tooltipContentProps}>\n                {tooltip}\n              </TooltipContent>\n            </TooltipPortal>\n          </Tooltip>\n        </TooltipProvider>\n      );\n    }\n\n    return component;\n  });\n}\n",
      "path": "plate-ui/tooltip.tsx",
      "target": "components/plate-ui/tooltip.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "tooltip",
  "registryDependencies": [],
  "type": "registry:ui"
}
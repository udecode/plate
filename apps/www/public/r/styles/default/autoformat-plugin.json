{
  "dependencies": [
    "@udecode/plate-autoformat",
    "@udecode/plate-basic-marks",
    "@udecode/plate-block-quote",
    "@udecode/plate-code-block",
    "@udecode/plate-heading",
    "@udecode/plate-highlight",
    "@udecode/plate-horizontal-rule",
    "@udecode/plate-indent-list",
    "@udecode/plate-toggle"
  ],
  "files": [
    {
      "content": "'use client';\n\nimport type { AutoformatRule } from '@udecode/plate-autoformat';\nimport type { SlateEditor } from '@udecode/plate-common';\n\nimport {\n  autoformatArrow,\n  autoformatLegal,\n  autoformatLegalHtml,\n  autoformatMath,\n  autoformatPunctuation,\n  autoformatSmartQuotes,\n} from '@udecode/plate-autoformat';\nimport { AutoformatPlugin } from '@udecode/plate-autoformat/react';\nimport {\n  BoldPlugin,\n  CodePlugin,\n  ItalicPlugin,\n  StrikethroughPlugin,\n  SubscriptPlugin,\n  SuperscriptPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { insertEmptyCodeBlock } from '@udecode/plate-code-block';\nimport {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n} from '@udecode/plate-code-block/react';\nimport {\n  getParentNode,\n  insertNodes,\n  isElement,\n  isType,\n  setNodes,\n} from '@udecode/plate-common';\nimport { ParagraphPlugin } from '@udecode/plate-common/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { HighlightPlugin } from '@udecode/plate-highlight/react';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport {\n  INDENT_LIST_KEYS,\n  ListStyleType,\n  toggleIndentList,\n} from '@udecode/plate-indent-list';\nimport { TogglePlugin, openNextToggles } from '@udecode/plate-toggle/react';\n\nexport const format = (editor: SlateEditor, customFormatting: any) => {\n  if (editor.selection) {\n    const parentEntry = getParentNode(editor, editor.selection);\n\n    if (!parentEntry) return;\n\n    const [node] = parentEntry;\n\n    if (\n      isElement(node) &&\n      !isType(editor, node, CodeBlockPlugin.key) &&\n      !isType(editor, node, CodeLinePlugin.key)\n    ) {\n      customFormatting();\n    }\n  }\n};\n\nexport const autoformatMarks: AutoformatRule[] = [\n  {\n    match: '***',\n    mode: 'mark',\n    type: [BoldPlugin.key, ItalicPlugin.key],\n  },\n  {\n    match: '__*',\n    mode: 'mark',\n    type: [UnderlinePlugin.key, ItalicPlugin.key],\n  },\n  {\n    match: '__**',\n    mode: 'mark',\n    type: [UnderlinePlugin.key, BoldPlugin.key],\n  },\n  {\n    match: '___***',\n    mode: 'mark',\n    type: [UnderlinePlugin.key, BoldPlugin.key, ItalicPlugin.key],\n  },\n  {\n    match: '**',\n    mode: 'mark',\n    type: BoldPlugin.key,\n  },\n  {\n    match: '__',\n    mode: 'mark',\n    type: UnderlinePlugin.key,\n  },\n  {\n    match: '*',\n    mode: 'mark',\n    type: ItalicPlugin.key,\n  },\n  {\n    match: '_',\n    mode: 'mark',\n    type: ItalicPlugin.key,\n  },\n  {\n    match: '~~',\n    mode: 'mark',\n    type: StrikethroughPlugin.key,\n  },\n  {\n    match: '^',\n    mode: 'mark',\n    type: SuperscriptPlugin.key,\n  },\n  {\n    match: '~',\n    mode: 'mark',\n    type: SubscriptPlugin.key,\n  },\n  {\n    match: '==',\n    mode: 'mark',\n    type: HighlightPlugin.key,\n  },\n  {\n    match: '≡',\n    mode: 'mark',\n    type: HighlightPlugin.key,\n  },\n  {\n    match: '`',\n    mode: 'mark',\n    type: CodePlugin.key,\n  },\n];\n\nexport const autoformatBlocks: AutoformatRule[] = [\n  {\n    match: '# ',\n    mode: 'block',\n    type: HEADING_KEYS.h1,\n  },\n  {\n    match: '## ',\n    mode: 'block',\n    type: HEADING_KEYS.h2,\n  },\n  {\n    match: '### ',\n    mode: 'block',\n    type: HEADING_KEYS.h3,\n  },\n  {\n    match: '#### ',\n    mode: 'block',\n    type: HEADING_KEYS.h4,\n  },\n  {\n    match: '##### ',\n    mode: 'block',\n    type: HEADING_KEYS.h5,\n  },\n  {\n    match: '###### ',\n    mode: 'block',\n    type: HEADING_KEYS.h6,\n  },\n  {\n    match: '> ',\n    mode: 'block',\n    type: BlockquotePlugin.key,\n  },\n  {\n    format: (editor) => {\n      insertEmptyCodeBlock(editor, {\n        defaultType: ParagraphPlugin.key,\n        insertNodesOptions: { select: true },\n      });\n    },\n    match: '```',\n    mode: 'block',\n    triggerAtBlockStart: false,\n    type: CodeBlockPlugin.key,\n  },\n  {\n    match: '+ ',\n    mode: 'block',\n    preFormat: openNextToggles,\n    type: TogglePlugin.key,\n  },\n  {\n    format: (editor) => {\n      setNodes(editor, { type: HorizontalRulePlugin.key });\n      insertNodes(editor, {\n        children: [{ text: '' }],\n        type: ParagraphPlugin.key,\n      });\n    },\n    match: ['---', '—-', '___ '],\n    mode: 'block',\n    type: HorizontalRulePlugin.key,\n  },\n];\n\nexport const autoformatIndentLists: AutoformatRule[] = [\n  {\n    format: (editor) => {\n      toggleIndentList(editor, {\n        listStyleType: ListStyleType.Disc,\n      });\n    },\n    match: ['* ', '- '],\n    mode: 'block',\n    type: 'list',\n  },\n  {\n    format: (editor) =>\n      toggleIndentList(editor, {\n        listStyleType: ListStyleType.Decimal,\n      }),\n    match: [String.raw`^\\d+\\.$ `, String.raw`^\\d+\\)$ `],\n    matchByRegex: true,\n    mode: 'block',\n    type: 'list',\n  },\n  {\n    format: (editor) => {\n      toggleIndentList(editor, {\n        listStyleType: INDENT_LIST_KEYS.todo,\n      });\n      setNodes(editor, {\n        checked: false,\n        listStyleType: INDENT_LIST_KEYS.todo,\n      });\n    },\n    match: ['[] '],\n    mode: 'block',\n    type: 'list',\n  },\n  {\n    format: (editor) => {\n      toggleIndentList(editor, {\n        listStyleType: INDENT_LIST_KEYS.todo,\n      });\n      setNodes(editor, {\n        checked: true,\n        listStyleType: INDENT_LIST_KEYS.todo,\n      });\n    },\n    match: ['[x] '],\n    mode: 'block',\n    type: 'list',\n  },\n];\n\nexport const autoformatPlugin = AutoformatPlugin.configure({\n  options: {\n    enableUndoOnDelete: true,\n    rules: [\n      ...autoformatBlocks,\n      ...autoformatMarks,\n      ...autoformatSmartQuotes,\n      ...autoformatPunctuation,\n      ...autoformatLegal,\n      ...autoformatLegalHtml,\n      ...autoformatArrow,\n      ...autoformatMath,\n      ...autoformatIndentLists,\n    ],\n  },\n});\n",
      "path": "components/editor/plugins/autoformat-plugin.ts",
      "target": "components/editor/plugins/autoformat-plugin.ts",
      "type": "registry:component"
    }
  ],
  "name": "autoformat-plugin",
  "type": "registry:component"
}
{
  "name": "mention-element",
  "dependencies": [
    "@udecode/plate-mention"
  ],
  "registryDependencies": [],
  "files": [
    {
      "name": "mention-element.tsx",
      "content": "import React, { forwardRef } from 'react';\nimport {\n  getHandler,\n  PlateElement,\n  PlateElementProps,\n  Value,\n} from '@udecode/plate-common';\nimport { TMentionElement } from '@udecode/plate-mention';\nimport { useFocused, useSelected } from 'slate-react';\n\nimport { cn } from '@/lib/utils';\n\nexport interface MentionElementProps\n  extends PlateElementProps<Value, TMentionElement> {\n  /**\n   * Prefix rendered before mention\n   */\n  prefix?: string;\n  onClick?: (mentionNode: any) => void;\n  renderLabel?: (mentionable: TMentionElement) => string;\n}\n\nconst MentionElement = forwardRef<\n  React.ElementRef<typeof PlateElement>,\n  MentionElementProps\n>(({ prefix, renderLabel, className, onClick, ...props }, ref) => {\n  const { children, element } = props;\n\n  const selected = useSelected();\n  const focused = useFocused();\n\n  return (\n    <PlateElement\n      ref={ref}\n      className={cn(\n        'inline-block cursor-pointer rounded-md bg-muted px-1.5 py-0.5 align-baseline text-sm font-medium',\n        selected && focused && 'ring-2 ring-ring',\n        element.children[0].bold === true && 'font-bold',\n        element.children[0].italic === true && 'italic',\n        element.children[0].underline === true && 'underline',\n        className\n      )}\n      data-slate-value={element.value}\n      contentEditable={false}\n      onClick={getHandler(onClick, element)}\n      {...props}\n    >\n      {prefix}\n      {renderLabel ? renderLabel(element) : element.value}\n      {children}\n    </PlateElement>\n  );\n});\n\nMentionElement.displayName = 'MentionElement';\n\nexport { MentionElement };\n"
    }
  ],
  "type": "components:plate-ui"
}
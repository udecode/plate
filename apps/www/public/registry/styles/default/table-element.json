{
  "name": "table-element",
  "dependencies": [
    "@udecode/plate-table"
  ],
  "registryDependencies": [],
  "files": [
    {
      "name": "table-element.tsx",
      "content": "import React, { forwardRef } from 'react';\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\nimport { PopoverAnchor, PopoverContentProps } from '@radix-ui/react-popover';\nimport {\n  PlateElement,\n  PlateElementProps,\n  isCollapsed,\n  useElement,\n  usePlateEditorState,\n  useRemoveNodeButton,\n} from '@udecode/plate-common';\nimport {\n  TTableElement,\n  useTableBordersDropdownMenuContentState,\n  useTableElement,\n  useTableElementState,\n} from '@udecode/plate-table';\nimport { someNode } from '@udecode/slate';\nimport { useReadOnly } from 'slate-react';\n\nimport { cn } from '@/lib/utils';\nimport { Icons, iconVariants } from '@/components/icons';\n\nimport { Button } from './button';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n} from './dropdown-menu';\nimport { Popover, PopoverContent, popoverVariants } from './popover';\nimport { Separator } from './separator';\n\nconst TableBordersDropdownMenuContent = forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>((props, ref) => {\n  const {\n    getOnSelectTableBorder,\n    hasOuterBorders,\n    hasBottomBorder,\n    hasLeftBorder,\n    hasNoBorders,\n    hasRightBorder,\n    hasTopBorder,\n  } = useTableBordersDropdownMenuContentState();\n\n  return (\n    <DropdownMenuContent\n      ref={ref}\n      className={cn('min-w-[220px]')}\n      side=\"right\"\n      align=\"start\"\n      sideOffset={0}\n      {...props}\n    >\n      <DropdownMenuCheckboxItem\n        checked={hasBottomBorder}\n        onCheckedChange={getOnSelectTableBorder('bottom')}\n      >\n        <Icons.borderBottom className={iconVariants({ size: 'sm' })} />\n        <div>Bottom Border</div>\n      </DropdownMenuCheckboxItem>\n      <DropdownMenuCheckboxItem\n        checked={hasTopBorder}\n        onCheckedChange={getOnSelectTableBorder('top')}\n      >\n        <Icons.borderTop className={iconVariants({ size: 'sm' })} />\n        <div>Top Border</div>\n      </DropdownMenuCheckboxItem>\n      <DropdownMenuCheckboxItem\n        checked={hasLeftBorder}\n        onCheckedChange={getOnSelectTableBorder('left')}\n      >\n        <Icons.borderLeft className={iconVariants({ size: 'sm' })} />\n        <div>Left Border</div>\n      </DropdownMenuCheckboxItem>\n      <DropdownMenuCheckboxItem\n        checked={hasRightBorder}\n        onCheckedChange={getOnSelectTableBorder('right')}\n      >\n        <Icons.borderRight className={iconVariants({ size: 'sm' })} />\n        <div>Right Border</div>\n      </DropdownMenuCheckboxItem>\n\n      <Separator />\n\n      <DropdownMenuCheckboxItem\n        checked={hasNoBorders}\n        onCheckedChange={getOnSelectTableBorder('none')}\n      >\n        <Icons.borderNone className={iconVariants({ size: 'sm' })} />\n        <div>No Border</div>\n      </DropdownMenuCheckboxItem>\n      <DropdownMenuCheckboxItem\n        checked={hasOuterBorders}\n        onCheckedChange={getOnSelectTableBorder('outer')}\n      >\n        <Icons.borderAll className={iconVariants({ size: 'sm' })} />\n        <div>Outside Borders</div>\n      </DropdownMenuCheckboxItem>\n    </DropdownMenuContent>\n  );\n});\nTableBordersDropdownMenuContent.displayName = 'TableBordersDropdownMenuContent';\n\nconst TableFloatingToolbar = React.forwardRef<\n  React.ElementRef<typeof PopoverContent>,\n  PopoverContentProps\n>(({ children, ...props }, ref) => {\n  const element = useElement<TTableElement>();\n  const { props: buttonProps } = useRemoveNodeButton({ element });\n\n  const readOnly = useReadOnly();\n  const editor = usePlateEditorState();\n  const open =\n    !readOnly &&\n    someNode(editor, {\n      match: (n) => n === element,\n    }) &&\n    isCollapsed(editor.selection);\n\n  return (\n    <Popover open={open}>\n      <PopoverAnchor asChild>{children}</PopoverAnchor>\n      <PopoverContent\n        ref={ref}\n        className={cn(popoverVariants(), 'flex w-[220px] flex-col gap-1 p-1')}\n        onOpenAutoFocus={(e) => e.preventDefault()}\n        {...props}\n      >\n        <DropdownMenu modal={false}>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" isMenu>\n              <Icons.borderAll className=\"mr-2 h-4 w-4\" />\n              Borders\n            </Button>\n          </DropdownMenuTrigger>\n\n          <DropdownMenuPortal>\n            <TableBordersDropdownMenuContent />\n          </DropdownMenuPortal>\n        </DropdownMenu>\n\n        <Button contentEditable={false} variant=\"ghost\" isMenu {...buttonProps}>\n          <Icons.delete className=\"mr-2 h-4 w-4\" />\n          Delete\n        </Button>\n      </PopoverContent>\n    </Popover>\n  );\n});\nTableFloatingToolbar.displayName = 'TableFloatingToolbar';\n\nconst TableElement = React.forwardRef<\n  React.ElementRef<typeof PlateElement>,\n  PlateElementProps\n>(({ className, children, ...props }, ref) => {\n  const { colSizes, isSelectingCell, minColumnWidth, marginLeft } =\n    useTableElementState();\n  const { props: tableProps, colGroupProps } = useTableElement();\n\n  return (\n    <TableFloatingToolbar>\n      <div style={{ paddingLeft: marginLeft }}>\n        <PlateElement\n          asChild\n          ref={ref}\n          className={cn(\n            'my-4 ml-px mr-0 table h-px w-full table-fixed border-collapse',\n            isSelectingCell && '[&_*::selection]:bg-none',\n            className\n          )}\n          {...tableProps}\n          {...props}\n        >\n          <table>\n            <colgroup {...colGroupProps}>\n              {colSizes.map((width, index) => (\n                <col\n                  key={index}\n                  style={{\n                    minWidth: minColumnWidth,\n                    width: width || undefined,\n                  }}\n                />\n              ))}\n            </colgroup>\n\n            <tbody className=\"min-w-full\">{children}</tbody>\n          </table>\n        </PlateElement>\n      </div>\n    </TableFloatingToolbar>\n  );\n});\nTableElement.displayName = 'TableElement';\n\nexport { TableElement, TableFloatingToolbar, TableBordersDropdownMenuContent };\n"
    }
  ],
  "type": "components:plate-ui"
}
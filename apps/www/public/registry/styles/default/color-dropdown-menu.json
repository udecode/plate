{
  "name": "color-dropdown-menu",
  "dependencies": [],
  "registryDependencies": [
    "dropdown-menu",
    "toolbar",
    "separator",
    "button",
    "tooltip"
  ],
  "files": [
    {
      "name": "color-dropdown-menu.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { DropdownMenuProps } from '@radix-ui/react-dropdown-menu';\nimport {\n  useColorDropdownMenu,\n  useColorDropdownMenuState,\n} from '@udecode/plate-font';\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from '@/registry/default/plate-ui/dropdown-menu';\nimport { ToolbarButton } from '@/registry/default/plate-ui/toolbar';\n\nimport { DEFAULT_COLORS, DEFAULT_CUSTOM_COLORS } from './color-constants';\nimport { ColorPicker } from './color-picker';\n\nexport type TColor = {\n  name: string;\n  value: string;\n  isBrightColor: boolean;\n};\n\ntype ColorDropdownMenuProps = {\n  nodeType: string;\n  tooltip?: string;\n} & DropdownMenuProps;\n\nexport function ColorDropdownMenu({\n  nodeType,\n  tooltip,\n  children,\n}: ColorDropdownMenuProps) {\n  const state = useColorDropdownMenuState({\n    nodeType,\n    colors: DEFAULT_COLORS,\n    customColors: DEFAULT_CUSTOM_COLORS,\n    closeOnSelect: true,\n  });\n\n  const { menuProps, buttonProps } = useColorDropdownMenu(state);\n\n  return (\n    <DropdownMenu modal={false} {...menuProps}>\n      <DropdownMenuTrigger asChild>\n        <ToolbarButton tooltip={tooltip} {...buttonProps}>\n          {children}\n        </ToolbarButton>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent align=\"start\">\n        <ColorPicker\n          color={state.selectedColor || state.color}\n          colors={state.colors}\n          customColors={state.customColors}\n          updateColor={state.updateColorAndClose}\n          updateCustomColor={state.updateColor}\n          clearColor={state.clearColor}\n        />\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n"
    },
    {
      "name": "color-constants.ts",
      "content": "export const DEFAULT_COLORS = [\n  {\n    name: 'black',\n    value: '#000000',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark grey 4',\n    value: '#434343',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark grey 3',\n    value: '#666666',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark grey 2',\n    value: '#999999',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark grey 1',\n    value: '#B7B7B7',\n    isBrightColor: false,\n  },\n  {\n    name: 'grey',\n    value: '#CCCCCC',\n    isBrightColor: false,\n  },\n  {\n    name: 'light grey 1',\n    value: '#D9D9D9',\n    isBrightColor: false,\n  },\n  {\n    name: 'light grey 2',\n    value: '#EFEFEF',\n    isBrightColor: true,\n  },\n  {\n    name: 'light grey 3',\n    value: '#F3F3F3',\n    isBrightColor: true,\n  },\n  {\n    name: 'white',\n    value: '#FFFFFF',\n    isBrightColor: true,\n  },\n  {\n    name: 'red berry',\n    value: '#980100',\n    isBrightColor: false,\n  },\n  {\n    name: 'red',\n    value: '#FE0000',\n    isBrightColor: false,\n  },\n  {\n    name: 'orange',\n    value: '#FE9900',\n    isBrightColor: false,\n  },\n  {\n    name: 'yellow',\n    value: '#FEFF00',\n    isBrightColor: true,\n  },\n  {\n    name: 'green',\n    value: '#00FF00',\n    isBrightColor: false,\n  },\n  {\n    name: 'cyan',\n    value: '#00FFFF',\n    isBrightColor: false,\n  },\n  {\n    name: 'cornflower blue',\n    value: '#4B85E8',\n    isBrightColor: false,\n  },\n  {\n    name: 'blue',\n    value: '#1300FF',\n    isBrightColor: false,\n  },\n  {\n    name: 'purple',\n    value: '#9900FF',\n    isBrightColor: false,\n  },\n  {\n    name: 'magenta',\n    value: '#FF00FF',\n    isBrightColor: false,\n  },\n\n  {\n    name: 'light red berry 3',\n    value: '#E6B8AF',\n    isBrightColor: false,\n  },\n  {\n    name: 'light red 3',\n    value: '#F4CCCC',\n    isBrightColor: false,\n  },\n  {\n    name: 'light orange 3',\n    value: '#FCE4CD',\n    isBrightColor: true,\n  },\n  {\n    name: 'light yellow 3',\n    value: '#FFF2CC',\n    isBrightColor: true,\n  },\n  {\n    name: 'light green 3',\n    value: '#D9EAD3',\n    isBrightColor: true,\n  },\n  {\n    name: 'light cyan 3',\n    value: '#D0DFE3',\n    isBrightColor: false,\n  },\n  {\n    name: 'light cornflower blue 3',\n    value: '#C9DAF8',\n    isBrightColor: false,\n  },\n  {\n    name: 'light blue 3',\n    value: '#CFE1F3',\n    isBrightColor: true,\n  },\n  {\n    name: 'light purple 3',\n    value: '#D9D2E9',\n    isBrightColor: true,\n  },\n  {\n    name: 'light magenta 3',\n    value: '#EAD1DB',\n    isBrightColor: true,\n  },\n\n  {\n    name: 'light red berry 2',\n    value: '#DC7E6B',\n    isBrightColor: false,\n  },\n  {\n    name: 'light red 2',\n    value: '#EA9999',\n    isBrightColor: false,\n  },\n  {\n    name: 'light orange 2',\n    value: '#F9CB9C',\n    isBrightColor: false,\n  },\n  {\n    name: 'light yellow 2',\n    value: '#FFE598',\n    isBrightColor: true,\n  },\n  {\n    name: 'light green 2',\n    value: '#B7D6A8',\n    isBrightColor: false,\n  },\n  {\n    name: 'light cyan 2',\n    value: '#A1C4C9',\n    isBrightColor: false,\n  },\n  {\n    name: 'light cornflower blue 2',\n    value: '#A4C2F4',\n    isBrightColor: false,\n  },\n  {\n    name: 'light blue 2',\n    value: '#9FC5E8',\n    isBrightColor: false,\n  },\n  {\n    name: 'light purple 2',\n    value: '#B5A7D5',\n    isBrightColor: false,\n  },\n  {\n    name: 'light magenta 2',\n    value: '#D5A6BD',\n    isBrightColor: false,\n  },\n\n  {\n    name: 'light red berry 1',\n    value: '#CC4125',\n    isBrightColor: false,\n  },\n  {\n    name: 'light red 1',\n    value: '#E06666',\n    isBrightColor: false,\n  },\n  {\n    name: 'light orange 1',\n    value: '#F6B26B',\n    isBrightColor: false,\n  },\n  {\n    name: 'light yellow 1',\n    value: '#FFD966',\n    isBrightColor: false,\n  },\n  {\n    name: 'light green 1',\n    value: '#93C47D',\n    isBrightColor: false,\n  },\n  {\n    name: 'light cyan 1',\n    value: '#76A5AE',\n    isBrightColor: false,\n  },\n  {\n    name: 'light cornflower blue 1',\n    value: '#6C9EEB',\n    isBrightColor: false,\n  },\n  {\n    name: 'light blue 1',\n    value: '#6FA8DC',\n    isBrightColor: false,\n  },\n  {\n    name: 'light purple 1',\n    value: '#8D7CC3',\n    isBrightColor: false,\n  },\n  {\n    name: 'light magenta 1',\n    value: '#C27BA0',\n    isBrightColor: false,\n  },\n\n  {\n    name: 'dark red berry 1',\n    value: '#A61B00',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark red 1',\n    value: '#CC0000',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark orange 1',\n    value: '#E59138',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark yellow 1',\n    value: '#F1C231',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark green 1',\n    value: '#6AA74F',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark cyan 1',\n    value: '#45818E',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark cornflower blue 1',\n    value: '#3B78D8',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark blue 1',\n    value: '#3E84C6',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark purple 1',\n    value: '#664EA6',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark magenta 1',\n    value: '#A64D78',\n    isBrightColor: false,\n  },\n\n  {\n    name: 'dark red berry 2',\n    value: '#84200D',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark red 2',\n    value: '#990001',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark orange 2',\n    value: '#B45F05',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark yellow 2',\n    value: '#BF9002',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark green 2',\n    value: '#38761D',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark cyan 2',\n    value: '#124F5C',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark cornflower blue 2',\n    value: '#1155CB',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark blue 2',\n    value: '#0C5394',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark purple 2',\n    value: '#351C75',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark magenta 2',\n    value: '#741B47',\n    isBrightColor: false,\n  },\n\n  {\n    name: 'dark red berry 3',\n    value: '#5B0F00',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark red 3',\n    value: '#660000',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark orange 3',\n    value: '#783F04',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark yellow 3',\n    value: '#7E6000',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark green 3',\n    value: '#274E12',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark cyan 3',\n    value: '#0D343D',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark cornflower blue 3',\n    value: '#1B4487',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark blue 3',\n    value: '#083763',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark purple 3',\n    value: '#1F124D',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark magenta 3',\n    value: '#4C1130',\n    isBrightColor: false,\n  },\n];\n\nexport const DEFAULT_CUSTOM_COLORS = [\n  {\n    name: 'dark orange 3',\n    value: '#783F04',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark grey 3',\n    value: '#666666',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark grey 2',\n    value: '#999999',\n    isBrightColor: false,\n  },\n  {\n    name: 'light cornflower blue 1',\n    value: '#6C9EEB',\n    isBrightColor: false,\n  },\n  {\n    name: 'dark magenta 3',\n    value: '#4C1130',\n    isBrightColor: false,\n  },\n];\n"
    },
    {
      "name": "color-dropdown-menu-items.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { DropdownMenuItemProps } from '@radix-ui/react-dropdown-menu';\n\nimport { cn } from '@/lib/utils';\nimport { Icons } from '@/components/icons';\nimport { buttonVariants } from '@/registry/default/plate-ui/button';\nimport { DropdownMenuItem } from '@/registry/default/plate-ui/dropdown-menu';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from '@/registry/default/plate-ui/tooltip';\n\nimport { TColor } from './color-dropdown-menu';\n\ntype ColorDropdownMenuItemProps = {\n  value: string;\n  isBrightColor: boolean;\n  isSelected: boolean;\n  updateColor: (color: string) => void;\n  name?: string;\n} & DropdownMenuItemProps;\n\nexport function ColorDropdownMenuItem({\n  name,\n  value,\n  isBrightColor,\n  isSelected,\n  updateColor,\n  className,\n  ...props\n}: ColorDropdownMenuItemProps) {\n  const content = (\n    <DropdownMenuItem\n      className={cn(\n        buttonVariants({\n          variant: 'outline',\n          isMenu: true,\n        }),\n        'h-6 w-6 border border-solid border-muted p-0',\n        !isBrightColor && 'border-transparent text-white',\n        className\n      )}\n      style={{ backgroundColor: value }}\n      onSelect={(e) => {\n        e.preventDefault();\n        updateColor(value);\n      }}\n      {...props}\n    >\n      {isSelected ? <Icons.check /> : null}\n    </DropdownMenuItem>\n  );\n\n  return name ? (\n    <Tooltip>\n      <TooltipTrigger>{content}</TooltipTrigger>\n      <TooltipContent>{name}</TooltipContent>\n    </Tooltip>\n  ) : (\n    content\n  );\n}\n\ntype ColorDropdownMenuItemsProps = {\n  color?: string;\n  colors: TColor[];\n  updateColor: (color: string) => void;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nexport function ColorDropdownMenuItems({\n  color,\n  colors,\n  updateColor,\n  className,\n  ...props\n}: ColorDropdownMenuItemsProps) {\n  return (\n    <div\n      className={cn('grid grid-cols-[repeat(10,1fr)] gap-1', className)}\n      {...props}\n    >\n      {colors.map(({ name, value, isBrightColor }) => (\n        <ColorDropdownMenuItem\n          key={name ?? value}\n          name={name}\n          value={value}\n          isBrightColor={isBrightColor}\n          isSelected={color === value}\n          updateColor={updateColor}\n        />\n      ))}\n    </div>\n  );\n}\n"
    },
    {
      "name": "color-input.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { useColorInput } from '@udecode/plate-font';\n\nimport { cn } from '@/lib/utils';\n\nexport function ColorInput({\n  value = '#000000',\n  onChange,\n  children,\n  className,\n  ...props\n}: React.InputHTMLAttributes<HTMLInputElement>) {\n  const { inputRef, childProps } = useColorInput();\n\n  return (\n    <div className={cn('flex flex-col items-center', className)} {...props}>\n      {React.Children.map(children, (child) => {\n        if (!child) return child;\n\n        return React.cloneElement(child as React.ReactElement, childProps);\n      })}\n\n      <input\n        ref={inputRef}\n        className=\"h-0 w-0 overflow-hidden border-0 p-0\"\n        type=\"color\"\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n}\n"
    },
    {
      "name": "color-picker.tsx",
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn } from '@/lib/utils';\nimport { buttonVariants } from '@/registry/default/plate-ui/button';\nimport { DropdownMenuItem } from '@/registry/default/plate-ui/dropdown-menu';\nimport { Separator } from '@/registry/default/plate-ui/separator';\n\nimport { TColor } from './color-dropdown-menu';\nimport { ColorDropdownMenuItems } from './color-dropdown-menu-items';\nimport { ColorsCustom } from './colors-custom';\n\ntype ColorPickerProps = {\n  color?: string;\n  colors: TColor[];\n  customColors: TColor[];\n  updateColor: (color: string) => void;\n  updateCustomColor: (color: string) => void;\n  clearColor: () => void;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nexport function ColorPickerContent({\n  color,\n  colors,\n  customColors,\n  updateColor,\n  updateCustomColor,\n  clearColor,\n  className,\n  ...props\n}: ColorPickerProps) {\n  return (\n    <div className={cn('flex flex-col gap-4 p-4', className)} {...props}>\n      <ColorsCustom\n        color={color}\n        colors={colors}\n        customColors={customColors}\n        updateColor={updateColor}\n        updateCustomColor={updateCustomColor}\n      />\n\n      <Separator />\n\n      <ColorDropdownMenuItems\n        color={color}\n        colors={colors}\n        updateColor={updateColor}\n      />\n      {color && (\n        <DropdownMenuItem\n          className={buttonVariants({\n            variant: 'outline',\n            isMenu: true,\n          })}\n          onClick={clearColor}\n        >\n          Clear\n        </DropdownMenuItem>\n      )}\n    </div>\n  );\n}\n\nexport const ColorPicker = React.memo(\n  ColorPickerContent,\n  (prev, next) =>\n    prev.color === next.color &&\n    prev.colors === next.colors &&\n    prev.customColors === next.customColors\n);\n"
    },
    {
      "name": "colors-custom.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { useColorsCustom, useColorsCustomState } from '@udecode/plate-font';\n\nimport { buttonVariants } from '@/registry/default/plate-ui/button';\nimport { DropdownMenuItem } from '@/registry/default/plate-ui/dropdown-menu';\n\nimport { TColor } from './color-dropdown-menu';\nimport { ColorDropdownMenuItems } from './color-dropdown-menu-items';\nimport { ColorInput } from './color-input';\n\ntype ColorsCustomProps = {\n  color?: string;\n  colors: TColor[];\n  customColors: TColor[];\n  updateCustomColor: (color: string) => void;\n  updateColor: (color: string) => void;\n};\n\nexport function ColorsCustom({\n  color,\n  colors,\n  customColors,\n  updateColor,\n  updateCustomColor,\n}: ColorsCustomProps) {\n  const state = useColorsCustomState({\n    color,\n    colors,\n    customColors,\n    updateCustomColor,\n  });\n  const { inputProps, menuItemProps } = useColorsCustom(state);\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <ColorInput {...inputProps}>\n        <DropdownMenuItem\n          className={buttonVariants({\n            variant: 'outline',\n            isMenu: true,\n          })}\n          {...menuItemProps}\n        >\n          CUSTOM\n        </DropdownMenuItem>\n      </ColorInput>\n\n      <ColorDropdownMenuItems\n        color={color}\n        colors={state.computedColors}\n        updateColor={updateColor}\n      />\n    </div>\n  );\n}\n"
    }
  ],
  "type": "components:plate-ui"
}
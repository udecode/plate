{
  "name": "combobox",
  "dependencies": [
    "@udecode/plate-combobox"
  ],
  "registryDependencies": [
    "scroll-area"
  ],
  "files": [
    {
      "name": "combobox.tsx",
      "content": "'use client';\n\nimport React, { useEffect } from 'react';\nimport {\n  ComboboxContentItemProps,\n  ComboboxContentProps,\n  ComboboxProps,\n  Data,\n  NoData,\n  TComboboxItem,\n  comboboxActions,\n  useActiveComboboxStore,\n  useComboboxContent,\n  useComboboxContentState,\n  useComboboxControls,\n  useComboboxItem,\n  useComboboxSelectors,\n} from '@udecode/plate-combobox';\nimport {\n  PortalBody,\n  useEventEditorSelectors,\n  usePlateEditorState,\n} from '@udecode/plate-common';\n\nimport { cn } from '@/lib/utils';\n\nimport { ScrollArea } from './scroll-area';\n\nexport function ComboboxItem<TData extends Data = NoData>({\n  combobox,\n  index,\n  item,\n  onRenderItem,\n}: ComboboxContentItemProps<TData>) {\n  const { props } = useComboboxItem({ item, index, combobox, onRenderItem });\n\n  return (\n    <div\n      className={cn(\n        'relative flex h-9 cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors',\n        'hover:bg-accent hover:text-accent-foreground data-[highlighted=true]:bg-accent data-[highlighted=true]:text-accent-foreground'\n      )}\n      {...props}\n    />\n  );\n}\n\nexport function ComboboxContent<TData extends Data = NoData>(\n  props: ComboboxContentProps<TData>\n) {\n  const {\n    component: Component,\n    items,\n    portalElement,\n    combobox,\n    onRenderItem,\n  } = props;\n\n  const filteredItems =\n    useComboboxSelectors.filteredItems() as TComboboxItem<TData>[];\n  const activeComboboxStore = useActiveComboboxStore()!;\n\n  const state = useComboboxContentState({ items, combobox });\n  const { menuProps, menuRef } = useComboboxContent(state);\n\n  return (\n    <PortalBody element={portalElement}>\n      <ScrollArea\n        {...menuProps}\n        ref={menuRef}\n        className={cn(\n          'z-[500] m-0 max-h-[288px] w-[300px] overflow-scroll rounded-md bg-popover p-0 shadow-md'\n        )}\n      >\n        {Component ? Component({ store: activeComboboxStore }) : null}\n\n        {filteredItems.map((item, index) => (\n          <ComboboxItem\n            key={item.key}\n            item={item}\n            combobox={combobox}\n            index={index}\n            onRenderItem={onRenderItem}\n          />\n        ))}\n      </ScrollArea>\n    </PortalBody>\n  );\n}\n\n/**\n * Register the combobox id, trigger, onSelectItem\n * Renders the combobox if active.\n */\nexport function Combobox<TData extends Data = NoData>({\n  id,\n  trigger,\n  searchPattern,\n  onSelectItem,\n  controlled,\n  maxSuggestions,\n  filter,\n  sort,\n  floatingOptions,\n  disabled: _disabled,\n  ...props\n}: ComboboxProps<TData>) {\n  const storeItems = useComboboxSelectors.items();\n  const disabled =\n    _disabled ?? (storeItems.length === 0 && !props.items?.length);\n\n  const focusedEditorId = useEventEditorSelectors.focus?.();\n  const combobox = useComboboxControls();\n  const activeId = useComboboxSelectors.activeId();\n  const editor = usePlateEditorState();\n\n  useEffect(() => {\n    if (floatingOptions) {\n      comboboxActions.floatingOptions(floatingOptions);\n    }\n  }, [floatingOptions]);\n\n  useEffect(() => {\n    comboboxActions.setComboboxById({\n      id,\n      trigger,\n      searchPattern,\n      controlled,\n      onSelectItem,\n      maxSuggestions,\n      filter,\n      sort,\n    });\n  }, [\n    id,\n    trigger,\n    searchPattern,\n    controlled,\n    onSelectItem,\n    maxSuggestions,\n    filter,\n    sort,\n  ]);\n\n  if (\n    !combobox ||\n    !editor.selection ||\n    focusedEditorId !== editor.id ||\n    activeId !== id ||\n    disabled\n  ) {\n    return null;\n  }\n\n  return <ComboboxContent combobox={combobox} {...props} />;\n}\n"
    }
  ],
  "type": "components:plate-ui"
}
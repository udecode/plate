{
  "name": "table-cell-element",
  "dependencies": [
    "@udecode/plate-table"
  ],
  "registryDependencies": [],
  "files": [
    {
      "name": "table-cell-element.tsx",
      "content": "import React from 'react';\nimport { PlateElement, PlateElementProps } from '@udecode/plate-common';\nimport {\n  TableCellElementResizable,\n  useTableCellElement,\n  useTableCellElementState,\n} from '@udecode/plate-table';\n\nimport { cn } from '@/lib/utils';\n\nexport interface TableCellElementProps extends PlateElementProps {\n  hideBorder?: boolean;\n  isHeader?: boolean;\n}\n\nconst TableCellElement = React.forwardRef<\n  React.ElementRef<typeof PlateElement>,\n  TableCellElementProps\n>(({ className, ...props }, ref) => {\n  const { children, hideBorder, isHeader, ...rootProps } = props;\n\n  const {\n    colIndex,\n    rowIndex,\n    readOnly,\n    selected,\n    hovered,\n    hoveredLeft,\n    rowSize,\n    borders,\n  } = useTableCellElementState();\n  const { props: cellProps } = useTableCellElement({ element: props.element });\n\n  const Cell = isHeader ? 'th' : 'td';\n\n  return (\n    <PlateElement\n      asChild\n      ref={ref}\n      className={cn(\n        'relative overflow-visible border-none bg-background p-0',\n        hideBorder && 'before:border-none',\n        !hideBorder &&\n          cn(\n            isHeader && 'text-left [&_>_*]:m-0',\n            'before:h-full before:w-full',\n            selected && 'before:z-10 before:bg-muted',\n            \"before:absolute before:box-border before:select-none before:content-['']\",\n            borders &&\n              cn(\n                borders.bottom?.size &&\n                  `before:border-b before:border-b-border`,\n                borders.right?.size && `before:border-r before:border-r-border`,\n                borders.left?.size && `before:border-l before:border-l-border`,\n                borders.top?.size && `before:border-t before:border-t-border`\n              )\n          ),\n        className\n      )}\n      {...cellProps}\n      {...rootProps}\n    >\n      <Cell>\n        <div\n          className=\"relative z-20 box-border h-full px-3 py-2\"\n          style={{\n            minHeight: rowSize,\n          }}\n        >\n          {children}\n        </div>\n\n        <div\n          className=\"group absolute top-0 h-full w-full select-none\"\n          contentEditable={false}\n        >\n          <TableCellElementResizable\n            colIndex={colIndex}\n            rowIndex={rowIndex}\n            readOnly={readOnly}\n          />\n\n          {!readOnly && hovered && (\n            <div\n              className={cn(\n                'absolute -top-3 z-30 h-[calc(100%_+_12px)] w-1 bg-ring',\n                'right-[-1.5px]'\n              )}\n            />\n          )}\n\n          {!readOnly && hoveredLeft && (\n            <div\n              className={cn(\n                'absolute -top-3 z-30 h-[calc(100%_+_12px)] w-1 bg-ring',\n                'left-[-1.5px]'\n              )}\n            />\n          )}\n        </div>\n      </Cell>\n    </PlateElement>\n  );\n});\nTableCellElement.displayName = 'TableCellElement';\n\nconst TableCellHeaderElement = React.forwardRef<\n  React.ElementRef<typeof TableCellElement>,\n  TableCellElementProps\n>((props, ref) => {\n  return <TableCellElement ref={ref} {...props} isHeader />;\n});\nTableCellHeaderElement.displayName = 'TableCellHeaderElement';\n\nexport { TableCellElement, TableCellHeaderElement };\n"
    }
  ],
  "type": "components:plate-ui"
}
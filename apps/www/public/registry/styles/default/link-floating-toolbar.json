{
  "name": "link-floating-toolbar",
  "dependencies": [
    "@udecode/plate-link"
  ],
  "registryDependencies": [
    "button",
    "input",
    "popover",
    "separator"
  ],
  "files": [
    {
      "name": "link-floating-toolbar.tsx",
      "content": "import React from 'react';\nimport { TEditableProps } from '@udecode/plate-common';\nimport {\n  flip,\n  offset,\n  UseVirtualFloatingOptions,\n} from '@udecode/plate-floating';\nimport {\n  FloatingLinkUrlInput,\n  LinkOpenButton,\n  useFloatingLinkEdit,\n  useFloatingLinkEditState,\n  useFloatingLinkInsert,\n  useFloatingLinkInsertState,\n  useFloatingLinkSelectors,\n} from '@udecode/plate-link';\n\nimport { cn } from '@/lib/utils';\nimport { Icons } from '@/components/icons';\n\nimport { buttonVariants } from './button';\nimport { inputVariants } from './input';\nimport { popoverVariants } from './popover';\nimport { Separator } from './separator';\n\nconst floatingOptions: UseVirtualFloatingOptions = {\n  placement: 'bottom-start',\n  middleware: [\n    offset(12),\n    flip({\n      padding: 12,\n      fallbackPlacements: [\n        'top-start',\n        'top-end',\n        'bottom-start',\n        'bottom-end',\n      ],\n    }),\n  ],\n};\n\nexport function LinkFloatingToolbar({ readOnly }: TEditableProps) {\n  const isEditing = useFloatingLinkSelectors().isEditing();\n\n  const state = useFloatingLinkInsertState({ floatingOptions });\n  const {\n    props: insertProps,\n    ref: insertRef,\n    textInputProps,\n  } = useFloatingLinkInsert(state);\n\n  const editState = useFloatingLinkEditState({ floatingOptions });\n  const {\n    props: editProps,\n    ref: editRef,\n    editButtonProps,\n    unlinkButtonProps,\n  } = useFloatingLinkEdit(editState);\n\n  if (readOnly) return null;\n\n  const input = (\n    <div className=\"flex w-[330px] flex-col\">\n      <div className=\"flex items-center\">\n        <div className=\"flex items-center pl-3 text-muted-foreground\">\n          <Icons.link className=\"h-4 w-4\" />\n        </div>\n\n        <FloatingLinkUrlInput\n          className={inputVariants({ variant: 'ghost', h: 'sm' })}\n          placeholder=\"Paste link\"\n        />\n      </div>\n\n      <Separator />\n\n      <div className=\"flex items-center\">\n        <div className=\"flex items-center pl-3 text-muted-foreground\">\n          <Icons.text className=\"h-4 w-4\" />\n        </div>\n        <input\n          className={inputVariants({ variant: 'ghost', h: 'sm' })}\n          placeholder=\"Text to display\"\n          {...textInputProps}\n        />\n      </div>\n    </div>\n  );\n\n  const editContent = isEditing ? (\n    input\n  ) : (\n    <div className=\"box-content flex h-9 items-center gap-1\">\n      <button\n        type=\"button\"\n        className={buttonVariants({ variant: 'ghost', size: 'sm' })}\n        {...editButtonProps}\n      >\n        Edit link\n      </button>\n\n      <Separator orientation=\"vertical\" />\n\n      <LinkOpenButton\n        className={buttonVariants({\n          variant: 'ghost',\n          size: 'sms',\n        })}\n      >\n        <Icons.externalLink width={18} />\n      </LinkOpenButton>\n\n      <Separator orientation=\"vertical\" />\n\n      <button\n        type=\"button\"\n        className={buttonVariants({\n          variant: 'ghost',\n          size: 'sms',\n        })}\n        {...unlinkButtonProps}\n      >\n        <Icons.unlink width={18} />\n      </button>\n    </div>\n  );\n\n  return (\n    <>\n      <div\n        ref={insertRef}\n        className={cn(popoverVariants(), 'w-auto p-1')}\n        {...insertProps}\n      >\n        {input}\n      </div>\n\n      <div\n        ref={editRef}\n        className={cn(popoverVariants(), 'w-auto p-1')}\n        {...editProps}\n      >\n        {editContent}\n      </div>\n    </>\n  );\n}\n"
    }
  ],
  "type": "components:plate-ui"
}
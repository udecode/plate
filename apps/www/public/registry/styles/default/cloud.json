{
  "name": "cloud",
  "dependencies": [
    "@udecode/plate-cloud"
  ],
  "registryDependencies": [],
  "files": [
    {
      "name": "cloud.tsx",
      "content": "export * from './cloud-attachment-element';\nexport * from './cloud-image-element';\nexport * from './cloud-resize-controls';\nexport * from './cloud-status-bar';\nexport * from './cloud-toolbar-buttons';\n"
    },
    {
      "name": "cloud-attachment-element.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport {\n  TCloudAttachmentElement,\n  useCloudAttachmentElementState,\n} from '@udecode/plate-cloud';\nimport { PlateElement, PlateElementProps, Value } from '@udecode/plate-common';\n\nimport { cn } from '@/lib/utils';\nimport { Icons } from '@/components/icons';\n\nimport { StatusBar } from './cloud-status-bar';\n\nexport interface CloudAttachmentElementProps\n  extends PlateElementProps<Value, TCloudAttachmentElement> {}\n\nexport function CloudAttachmentElement({\n  className,\n  ...props\n}: CloudAttachmentElementProps) {\n  const { children, element } = props;\n\n  const { focused, selected, upload } = useCloudAttachmentElementState({\n    element,\n  });\n\n  return (\n    <PlateElement\n      className={cn(\n        'relative my-4 flex h-10 max-w-sm items-center gap-2 rounded-lg border border-border bg-background p-4',\n        focused && selected && 'border-blue-400 shadow-[0_0_1px_3px_#60a5fa]',\n        className\n      )}\n      draggable\n      {...props}\n    >\n      <div className=\"shrink-0 text-muted-foreground\" contentEditable={false}>\n        <Icons.attachment width={24} height={24} />\n      </div>\n      <div className=\"grow\" contentEditable={false}>\n        <div className=\"text-base\">{element.filename}</div>\n        <StatusBar upload={upload}>\n          <div className=\"text-sm text-muted-foreground\">\n            {element.bytes} bytes\n          </div>\n        </StatusBar>\n      </div>\n      <div\n        className=\"ml-4 h-8 w-8 shrink-0 duration-200\"\n        contentEditable={false}\n      >\n        {upload.status === 'success' && (\n          <a href={element.url} target=\"_blank\" rel=\"noreferrer\">\n            <Icons.downloadCloud\n              className=\"cursor-pointer text-muted-foreground hover:text-foreground\"\n              width={24}\n              height={24}\n            />\n          </a>\n        )}\n      </div>\n      {children}\n    </PlateElement>\n  );\n}\n"
    },
    {
      "name": "cloud-image-element.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport {\n  TCloudImageElement,\n  useCloudImageElementState,\n} from '@udecode/plate-cloud';\nimport { PlateElement, PlateElementProps, Value } from '@udecode/plate-common';\n\nimport { cn } from '@/lib/utils';\n\nimport { ResizeControls } from './cloud-resize-controls';\nimport { StatusBar } from './cloud-status-bar';\n\nexport interface CloudImageElementProps\n  extends PlateElementProps<Value, TCloudImageElement> {}\n\nexport function CloudImageElement({\n  className,\n  ...props\n}: CloudImageElementProps) {\n  const { children, element } = props;\n\n  const { focused, selected, src, srcSet, size, upload, setSize } =\n    useCloudImageElementState({ element });\n\n  return (\n    <PlateElement\n      className={cn('relative my-4', className)}\n      draggable\n      {...props}\n    >\n      <span\n        contentEditable={false}\n        style={{\n          /**\n           * NOTE:\n           * This code pretty much needs to be this way or things stop working\n           * so this cannot be overrided in the `.styles.ts` file.\n           */\n          position: 'relative',\n          display: 'inline-block',\n          /**\n           * This is required so that we don't get an extra gap at the bottom.\n           * When display is 'inline-block' we get some extra space at the bottom\n           * for the descenders because the content is expected to co-exist with text.\n           *\n           * Setting vertical-align to top, bottom or middle fixes this because it is\n           * no longer baseline which causes the issue.\n           *\n           * This is usually an issue with 'img' but also affects this scenario.\n           *\n           * https://stackoverflow.com/questions/5804256/image-inside-div-has-extra-space-below-the-image\n           *\n           * Also, make sure that <img> on the inside is display: 'block'.\n           */\n          verticalAlign: 'top',\n          /**\n           * Disable user select. We use our own selection display.\n           */\n          userSelect: 'none',\n        }}\n      >\n        {src === '' ? (\n          <div\n            className={cn(\n              'block rounded-lg',\n              focused && selected && 'shadow-[0_0_1px_3px_#60a5fa]'\n            )}\n            style={{\n              width: size.width,\n              height: size.height,\n              background: '#e0e0e0',\n            }}\n          />\n        ) : (\n          // eslint-disable-next-line @next/next/no-img-element\n          <img\n            className={cn(\n              'block rounded-lg',\n              focused && selected && 'shadow-[0_0_1px_3px_#60a5fa]'\n            )}\n            src={src}\n            srcSet={srcSet}\n            width={size.width}\n            height={size.height}\n            alt=\"\"\n          />\n        )}\n        <div className=\"absolute inset-x-2 top-[50%] -mt-2\">\n          <StatusBar upload={upload} />\n        </div>\n        {selected && focused && (\n          <ResizeControls element={element} size={size} setSize={setSize} />\n        )}\n      </span>\n      {children}\n    </PlateElement>\n  );\n}\n"
    },
    {
      "name": "cloud-resize-controls.tsx",
      "content": "'use client';\n\nimport React, {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useRef,\n  useState,\n} from 'react';\nimport { resizeInWidth } from '@portive/client';\nimport {\n  PlateCloudEditor,\n  PlateCloudImageEditor,\n  TCloudImageElement,\n} from '@udecode/plate-cloud';\nimport {\n  findNodePath,\n  setNodes,\n  usePlateEditorRef,\n} from '@udecode/plate-common';\n\ntype ImageSize = { width: number; height: number };\n\ntype SetImageSize = Dispatch<SetStateAction<ImageSize>>;\n\n/**\n * The resize label that shows the width/height of the image\n */\nfunction ResizeLabel({ size }: { size: { width: number; height: number } }) {\n  const isBelow = size.width < 100 || size.height < 100;\n  const bottom = isBelow ? -24 : 4;\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        bottom,\n        left: 4,\n        font: '10px/20px sans-serif',\n        color: 'white',\n        background: '#404040',\n        minWidth: 50,\n        padding: '0 7px',\n        borderRadius: 3,\n        textAlign: 'center',\n        boxShadow: '0px 0px 2px 1px rgba(255, 255, 255, 0.5)',\n        zIndex: 100,\n        transition: 'bottom 250ms',\n      }}\n    >\n      {size.width} &times; {size.height}\n    </div>\n  );\n}\n\n/**\n * The little divets on the resize handle bar.\n */\nconst barStyle = {\n  position: 'absolute',\n  top: 8,\n  width: 1,\n  height: 16,\n  background: 'rgba(255,255,255,0.75)',\n} as const;\n\n/**\n * The handle used to drag resize an image\n */\nfunction ResizeHandles({\n  onMouseDown,\n}: {\n  onMouseDown: React.MouseEventHandler;\n}) {\n  return (\n    <>\n      {/* Invisible Handle */}\n      <div\n        onMouseDown={onMouseDown}\n        style={{\n          position: 'absolute',\n          cursor: 'ew-resize',\n          width: 16,\n          right: -8,\n          top: 0,\n          bottom: 0,\n          background: 'rgba(127,127,127,0.01)',\n        }}\n      >\n        {/* Visible Handle */}\n        <div\n          style={{\n            position: 'absolute',\n            width: 16,\n            height: 32,\n            background: 'DodgerBlue',\n            borderRadius: 4,\n            left: 0,\n            top: '50%',\n            marginTop: -16,\n          }}\n        >\n          <div style={{ ...barStyle, left: 3.5 }} />\n          <div style={{ ...barStyle, left: 7.5 }} />\n          <div style={{ ...barStyle, left: 11.5 }} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport function ResizeControls({\n  element,\n  size,\n  setSize,\n}: {\n  element: TCloudImageElement;\n  size: ImageSize;\n  setSize: SetImageSize;\n}) {\n  const editor = usePlateEditorRef() as PlateCloudEditor &\n    PlateCloudImageEditor;\n  const [isResizing, setIsResizing] = useState(false);\n\n  const { minResizeWidth, maxResizeWidth } = editor.cloudImage;\n\n  const currentSizeRef = useRef<{ width: number; height: number }>();\n\n  const onMouseDown = useCallback(\n    (mouseDownEvent: React.MouseEvent) => {\n      setIsResizing(true);\n      const startX = mouseDownEvent.clientX;\n      const startWidth = size.width;\n      const minWidth = minResizeWidth;\n      const maxWidth = Math.min(element.maxWidth, maxResizeWidth);\n      /**\n       * Handle resize dragging through an event handler on mouseMove on the\n       * document.\n       */\n      function onDocumentMouseMove(mouseMoveEvent: MouseEvent) {\n        mouseMoveEvent.preventDefault();\n        mouseMoveEvent.stopPropagation();\n        /**\n         * Calculate the proposed width based on drag position\n         */\n        const proposedWidth = startWidth + mouseMoveEvent.clientX - startX;\n\n        /**\n         * Constrain the proposed with between min, max and original width\n         */\n        const nextWidth = Math.min(maxWidth, Math.max(minWidth, proposedWidth));\n\n        const currentSize = resizeInWidth(\n          { width: element.maxWidth, height: element.maxHeight },\n          nextWidth\n        );\n\n        currentSizeRef.current = currentSize;\n        setSize(currentSize);\n      }\n\n      const originalCursor = document.body.style.cursor;\n\n      /**\n       * When the user releases the mouse, remove all the event handlers\n       */\n      function onDocumentMouseUp() {\n        setIsResizing(false);\n        document.removeEventListener('mousemove', onDocumentMouseMove);\n        document.removeEventListener('mouseup', onDocumentMouseUp);\n        document.body.style.cursor = originalCursor;\n\n        const at = findNodePath(editor, element);\n\n        if (!currentSizeRef.current) return;\n\n        setNodes<TCloudImageElement>(editor, currentSizeRef.current, { at });\n      }\n\n      /**\n       * Attach document event listeners\n       */\n      document.addEventListener('mousemove', onDocumentMouseMove);\n      document.addEventListener('mouseup', onDocumentMouseUp);\n\n      /**\n       * While dragging, we want the cursor to be `ew-resize` (left-right arrow)\n       * even if the cursor happens to not be exactly on the handle at the moment\n       * due to a delay in the cursor moving to a location and the image resizing\n       * to it.\n       *\n       * Also, image has max width/height and the cursor can fall outside of it.\n       */\n      document.body.style.cursor = 'ew-resize';\n    },\n    [size.width, minResizeWidth, element, maxResizeWidth, setSize, editor]\n  );\n\n  if (element.width < minResizeWidth) return null;\n\n  return (\n    <>\n      {isResizing ? <ResizeLabel size={size} /> : null}\n      <ResizeHandles onMouseDown={onMouseDown} />\n    </>\n  );\n}\n"
    },
    {
      "name": "cloud-status-bar.tsx",
      "content": "'use client';\n\nimport React, { HTMLAttributes, useEffect, useRef, useState } from 'react';\nimport { Upload, UploadProgress } from '@udecode/plate-cloud';\n\nimport { cn } from '@/lib/utils';\n\nexport function ProgressBar({\n  upload,\n  className,\n  ...props\n}: {\n  upload: UploadProgress;\n} & HTMLAttributes<HTMLDivElement>) {\n  const [width, setWidth] = useState<null | number>(null);\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (ref.current) setWidth(ref.current.offsetWidth);\n  }, []);\n\n  /**\n   * This formula looks a little funny because we want the `0` value of the\n   * progress bar to have a width that is still the height of the progress bar.\n   *\n   * This is for a few reasons:\n   *\n   * 1. We want the zero point to start with the progress bar being a circle\n   * 2. If we want rounded edges, if the width is shorter than the height,\n   *    we get an oval instead of a circle\n   * 3. The halfway point looks visually wrong because of the circle progress\n   *    bar when it is technically at the halfway point.\n   */\n  const progressWidth =\n    width == null\n      ? 0\n      : (upload.sentBytes / upload.totalBytes) * (width - 16) + 16;\n\n  return (\n    <div\n      ref={ref}\n      className={cn('h-4 rounded-lg bg-gray-100 shadow-md', className)}\n      {...props}\n    >\n      <div\n        className=\"h-4 rounded-lg bg-blue-500 duration-100\"\n        style={{\n          width: progressWidth,\n        }}\n      />\n    </div>\n  );\n}\n\nexport function FailBar({\n  className,\n  ...props\n}: HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\n        'h-4 rounded-lg border bg-red-700 text-center text-xs font-bold uppercase leading-tight text-white shadow-md',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport function StatusBar(props: { upload: Upload; children?: JSX.Element }) {\n  const { upload, children } = props;\n  switch (upload.status) {\n    case 'progress': {\n      return <ProgressBar upload={upload} />;\n    }\n    case 'error': {\n      return <FailBar>Upload Failed</FailBar>;\n    }\n    case 'not-found': {\n      return <FailBar>Uploading...</FailBar>;\n    }\n    case 'success': {\n      return children || null;\n    }\n    default: {\n      throw new Error(`Should be unreachable`);\n    }\n  }\n}\n"
    },
    {
      "name": "cloud-toolbar-buttons.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { PlateCloudEditor } from '@udecode/plate-cloud';\nimport { usePlateEditorRef } from '@udecode/plate-core';\n\nconst buttonStyle: React.CSSProperties = {\n  marginRight: 4,\n  background: '#f0f0f0',\n  border: 'none',\n  padding: 8,\n  cursor: 'pointer',\n};\n\nexport function CloudToolbarButtons() {\n  const editor = usePlateEditorRef() as PlateCloudEditor;\n  const getSaveValue = () => {\n    console.info('editor.children', editor.children);\n    console.info('editor.cloud.getSaveValue()', editor.cloud.getSaveValue());\n  };\n\n  const finishUploads = async () => {\n    const start = Date.now();\n    // eslint-disable-next-line no-console\n    console.info('start finishUploads');\n    await editor.cloud.finishUploads();\n    const end = Date.now();\n    // NOTE: We don't use backtick with curly brace replacement because it\n    // doesn't work with gen:code script at time of writing.\n    // eslint-disable-next-line no-console\n    console.info(`end finishUploads in ms:`, end - start);\n  };\n\n  return (\n    <>\n      <button type=\"button\" style={buttonStyle} onClick={getSaveValue}>\n        Get Save Value\n      </button>\n      <button type=\"button\" style={buttonStyle} onClick={finishUploads}>\n        Await Finish Uploads\n      </button>\n      <span>\n        Note: After clicking a button, output will be shown in console.\n      </span>\n    </>\n  );\n}\n"
    }
  ],
  "type": "components:plate-ui"
}
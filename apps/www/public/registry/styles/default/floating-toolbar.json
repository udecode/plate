{
  "name": "floating-toolbar",
  "dependencies": [
    "@udecode/plate-floating"
  ],
  "registryDependencies": [
    "toolbar"
  ],
  "files": [
    {
      "name": "floating-toolbar.tsx",
      "content": "import React, { ReactNode } from 'react';\nimport { flip, offset } from '@floating-ui/react';\nimport { PortalBody, useComposedRef } from '@udecode/plate-common';\nimport {\n  useFloatingToolbar,\n  UseVirtualFloatingOptions,\n} from '@udecode/plate-floating';\n\nimport { cn } from '@/lib/utils';\n\nimport { Toolbar, ToolbarProps } from './toolbar';\n\nexport interface FloatingToolbarProps extends ToolbarProps {\n  children: ReactNode;\n\n  floatingOptions?: UseVirtualFloatingOptions;\n\n  ignoreReadOnly?: boolean;\n\n  hideToolbar?: boolean;\n}\n\nconst FloatingToolbar = React.forwardRef<\n  React.ElementRef<typeof Toolbar>,\n  FloatingToolbarProps\n>(\n  (\n    { floatingOptions, ignoreReadOnly, hideToolbar, children, ...props },\n    _ref\n  ) => {\n    const { refs, style, open } = useFloatingToolbar({\n      floatingOptions: {\n        placement: 'top',\n        middleware: [\n          offset(12),\n          flip({\n            padding: 12,\n            fallbackPlacements: [\n              'top-start',\n              'top-end',\n              'bottom-start',\n              'bottom-end',\n            ],\n          }),\n        ],\n      },\n      ignoreReadOnly,\n      hideToolbar,\n    });\n\n    const ref = useComposedRef<HTMLDivElement>(_ref, refs.setFloating);\n\n    if (!open) return null;\n\n    return (\n      <PortalBody>\n        <Toolbar\n          ref={ref}\n          className={cn(\n            'absolute z-50 whitespace-nowrap border bg-popover px-1 opacity-100 shadow-md'\n          )}\n          style={style}\n          {...props}\n        >\n          {children}\n        </Toolbar>\n      </PortalBody>\n    );\n  }\n);\nFloatingToolbar.displayName = 'FloatingToolbar';\n\nexport { FloatingToolbar };\n"
    }
  ],
  "type": "components:plate-ui"
}
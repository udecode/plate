{
  "name": "draggable",
  "dependencies": [
    "@udecode/plate-dnd",
    "react-dnd",
    "react-dnd-html5-backend"
  ],
  "registryDependencies": [
    "tooltip"
  ],
  "files": [
    {
      "name": "draggable.tsx",
      "content": "'use client';\n\nimport React, { forwardRef } from 'react';\nimport { ClassNames, PlateElementProps, TEditor } from '@udecode/plate-common';\nimport {\n  DragItemNode,\n  useDraggable,\n  useDraggableState,\n} from '@udecode/plate-dnd';\nimport { DropTargetMonitor } from 'react-dnd';\n\nimport { cn } from '@/lib/utils';\nimport { Icons } from '@/components/icons';\n\nimport { Tooltip, TooltipContent, TooltipTrigger } from './tooltip';\n\nexport interface DraggableProps\n  extends PlateElementProps,\n    ClassNames<{\n      /**\n       * Block and gutter.\n       */\n      blockAndGutter: string;\n\n      /**\n       * Block.\n       */\n      block: string;\n\n      /**\n       * Gutter at the left side of the editor.\n       * It has the height of the block\n       */\n      gutterLeft: string;\n\n      /**\n       * Block toolbar wrapper in the gutter left.\n       * It has the height of a line of the block.\n       */\n      blockToolbarWrapper: string;\n\n      /**\n       * Block toolbar in the gutter.\n       */\n      blockToolbar: string;\n\n      blockWrapper: string;\n\n      /**\n       * Button to dnd the block, in the block toolbar.\n       */\n      dragHandle: string;\n\n      /**\n       * Icon of the drag button, in the drag icon.\n       */\n      dragIcon: string;\n\n      /**\n       * Show a dropline above or below the block when dragging a block.\n       */\n      dropLine: string;\n    }> {\n  /**\n   * Intercepts the drop handling.\n   * If `false` is returned, the default drop behavior is called after.\n   * If `true` is returned, the default behavior is not called.\n   */\n  onDropHandler?: (\n    editor: TEditor,\n    props: {\n      monitor: DropTargetMonitor<DragItemNode, unknown>;\n      dragItem: DragItemNode;\n      nodeRef: any;\n      id: string;\n    }\n  ) => boolean;\n}\n\nconst Draggable = forwardRef<HTMLDivElement, DraggableProps>(\n  ({ className, classNames = {}, onDropHandler, ...props }, ref) => {\n    const { children, element } = props;\n\n    const state = useDraggableState({ element, onDropHandler });\n    const { dropLine, isDragging } = state;\n    const { droplineProps, gutterLeftProps, previewRef, handleRef } =\n      useDraggable(state);\n\n    return (\n      <div\n        className={cn(\n          'relative',\n          isDragging && 'opacity-50',\n          'group',\n          className\n        )}\n        ref={ref}\n      >\n        <div\n          className={cn(\n            'pointer-events-none absolute top-0 flex h-full -translate-x-full cursor-text opacity-0 group-hover:opacity-100',\n            classNames.gutterLeft\n          )}\n          {...gutterLeftProps}\n        >\n          <div className={cn('flex h-[1.5em]', classNames.blockToolbarWrapper)}>\n            <div\n              className={cn(\n                'pointer-events-auto mr-1 flex items-center',\n                classNames.blockToolbar\n              )}\n            >\n              <Tooltip>\n                <TooltipTrigger ref={handleRef}>\n                  <Icons.dragHandle className=\"h-4 w-4 text-muted-foreground\" />\n                </TooltipTrigger>\n                <TooltipContent>Drag to move</TooltipContent>\n              </Tooltip>\n            </div>\n          </div>\n        </div>\n\n        <div className={cn('', classNames.blockWrapper)} ref={previewRef}>\n          {children}\n\n          {!!dropLine && (\n            <div\n              className={cn(\n                'absolute inset-x-0 h-0.5 opacity-100',\n                'bg-ring',\n                dropLine === 'top' && '-top-px',\n                dropLine === 'bottom' && '-bottom-px',\n                classNames.dropLine\n              )}\n              {...droplineProps}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n);\nDraggable.displayName = 'Draggable';\n\nexport { Draggable };\n"
    },
    {
      "name": "with-draggables.tsx",
      "content": "import { FC } from 'react';\nimport { ELEMENT_BLOCKQUOTE } from '@udecode/plate-block-quote';\nimport { ELEMENT_CODE_BLOCK } from '@udecode/plate-code-block';\nimport { createNodesWithHOC } from '@udecode/plate-common';\nimport {\n  WithDraggableOptions,\n  withDraggable as withDraggablePrimitive,\n} from '@udecode/plate-dnd';\nimport {\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_H4,\n  ELEMENT_H5,\n  ELEMENT_H6,\n} from '@udecode/plate-heading';\nimport { ELEMENT_OL, ELEMENT_UL } from '@udecode/plate-list';\nimport { ELEMENT_PARAGRAPH } from '@udecode/plate-paragraph';\n\nimport { Draggable, DraggableProps } from './draggable';\n\nexport const withDraggable = (\n  Component: FC,\n  options?: WithDraggableOptions<\n    Partial<Omit<DraggableProps, 'editor' | 'element' | 'children'>>\n  >\n) =>\n  withDraggablePrimitive<DraggableProps>(Draggable, Component, options as any);\n\nexport const withDraggablesPrimitive = createNodesWithHOC(withDraggable);\n\nexport const withDraggables = (components: any) => {\n  return withDraggablesPrimitive(components, [\n    {\n      keys: [ELEMENT_PARAGRAPH, ELEMENT_UL, ELEMENT_OL],\n      level: 0,\n    },\n    {\n      key: ELEMENT_H1,\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'px-0 pb-1 text-[1.875em]',\n          blockToolbarWrapper: 'h-[1.3em]',\n        },\n      },\n    },\n    {\n      key: ELEMENT_H2,\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'px-0 pb-1 text-[1.5em]',\n          blockToolbarWrapper: 'h-[1.3em]',\n        },\n      },\n    },\n    {\n      key: ELEMENT_H3,\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-[2px] px-0 pb-1 text-[1.25em]',\n          blockToolbarWrapper: 'h-[1.3em]',\n        },\n      },\n    },\n    {\n      keys: [ELEMENT_H4, ELEMENT_H5],\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-[3px] px-0 pb-0 text-[1.1em]',\n          blockToolbarWrapper: 'h-[1.3em]',\n        },\n      },\n    },\n    {\n      keys: [ELEMENT_PARAGRAPH],\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-[3px] px-0 pb-0',\n        },\n      },\n    },\n    {\n      keys: [ELEMENT_H6, ELEMENT_UL, ELEMENT_OL],\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'px-0 pb-0',\n        },\n      },\n    },\n    {\n      key: ELEMENT_BLOCKQUOTE,\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'px-0 pb-0',\n        },\n      },\n    },\n    {\n      key: ELEMENT_CODE_BLOCK,\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-8 px-0 pb-0',\n        },\n      },\n    },\n  ]);\n};\n"
    }
  ],
  "type": "components:plate-ui"
}